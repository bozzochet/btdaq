#include "NewLadder.h"
#include "Messages.h"
#include <WidgetMessageTypes.h>


NewLadder::NewLadder(const TGWindow *p, const TGWindow *main, UInt_t w, UInt_t h) : TGTransientFrame(p, main, w, h) 
{
  fMain=main;
  fNLOpt = kVerticalFrame;
  fNLLay = new TGLayoutHints(kLHintsCenterX | kLHintsExpandX,0,0,0,0);
  fNL = new TGCompositeFrame(this,200,0,fNLOpt);
  fNLNameLay = new TGLayoutHints(kLHintsCenterX,0,0,0,0);
  fNLName = new TGLabel(fNL,"New Ladder",ffontcon[0],ffont[0]);

  fNLMax = 5;
  fNLSubOpt = kHorizontalFrame;
  fNLh1Opt  = kHorizontalFrame | kFixedSize;
  fNLh2Opt  = kHorizontalFrame | kFixedSize;
  fNLSubLay = new TGLayoutHints(kLHintsLeft,0,0,0,0);
  fNLh1Lay = new TGLayoutHints(kLHintsLeft,0,0,0,0);
  fNLh2Lay = new TGLayoutHints(kLHintsLeft,0,0,0,0);

  for (int i=0;i<fNLMax;i++){
    fNLSub[i] = new TGCompositeFrame(fNL,200,0,fNLSubOpt);
    fNLh1[i]  = new TGCompositeFrame(fNLSub[i],85,20,fNLh1Opt);
    fNLh2[i]  = new TGCompositeFrame(fNLSub[i],100,20,fNLh2Opt);
  }
  fNLSub[5] = new TGCompositeFrame(fNL,200,0,fNLSubOpt);

  fNLfx1Lay = new TGLayoutHints(kLHintsLeft,0,0,0,0);
  fNLf11 = new TGLabel(fNLh1[0],"Voltage:" ,ffontcon[2],ffont[2]);
  fNLf21 = new TGLabel(fNLh1[1],"Waffers:" ,ffontcon[2],ffont[2]);
  fNLf31 = new TGLabel(fNLh1[2],"Assembly:",ffontcon[2],ffont[2]);
  fNLf41 = new TGLabel(fNLh1[3],"Layer:"   ,ffontcon[2],ffont[2]);
  fNLf51 = new TGLabel(fNLh1[4],"Serial:"  ,ffontcon[2],ffont[2]);

  fNLfx2Lay = new TGLayoutHints(kLHintsLeft,0,0,0,0);
  fNLf12 = new TGComboBox(fNLh2[0],kNLCB_VOLTAGE);
    fNLf12->AddEntry("Low" , 1);  
    fNLf12->AddEntry("High", 2);
    fNLf12->Select(1);
    fNLf12->Resize(100,20);
    fNLf12->Associate(this);
    fVoltage='L';
  fNLf22 = new TGComboBox(fNLh2[1],kNLCB_WAFFERS);
    fNLf22->AddEntry("01", 1);  
    fNLf22->AddEntry("02", 2);
    fNLf22->AddEntry("03", 3);  
    fNLf22->AddEntry("04", 4);
    fNLf22->AddEntry("05", 5);  
    fNLf22->AddEntry("06", 6);
    fNLf22->AddEntry("07", 7);  
    fNLf22->AddEntry("08", 8);
    fNLf22->AddEntry("09", 9);  
    fNLf22->AddEntry("10",10);
    fNLf22->AddEntry("11",11);  
    fNLf22->AddEntry("12",12);
    fNLf22->AddEntry("13",13);  
    fNLf22->AddEntry("14",14);
    fNLf22->AddEntry("15",15);  
    fNLf22->Select(12);
    fNLf22->Resize(100,20);
    fNLf22->Associate(this);
    strcpy(fWaffers,"12");
  fNLf32 = new TGComboBox(fNLh2[2],kNLCB_ASSEMBLY);
    fNLf32->AddEntry("Geneve" , 1);  
    fNLf32->AddEntry("Perugia", 2);
    fNLf32->AddEntry("Zurich" , 3);  
    fNLf32->AddEntry("CERN"   , 4);
    fNLf32->Select(1);
    fNLf32->Resize(100,20);
    fNLf32->Associate(this);
    fAssembly='G';
  fNLf42 = new TGComboBox(fNLh2[3],kNLCB_LAYER);
    fNLf42->AddEntry("Inner", 1);  
    fNLf42->AddEntry("Outer", 2);
    fNLf42->AddEntry("Test" , 3);
    fNLf42->Select(1);
    fNLf42->Resize(100,20);
    fNLf42->Associate(this);
    fLayer='I';
  fNLf52 = new TGComboBox(fNLh2[4],kNLCB_SERIAL);
    fNLf52->AddEntry("001", 1);  
    fNLf52->AddEntry("002", 2);
    fNLf52->AddEntry("003", 3);
    fNLf52->Select(1);
    fNLf52->Resize(100,20);
    fNLf52->Associate(this);
    strcpy(fSerial,"001");

  fNLIdLay = new TGLayoutHints(kLHintsCenterX,0,0,10,10);
  fNLId = new TGLabel(fNL,GetLadderName(),ffontcon[1],ffont[1]);

  fNLB1Lay = new TGLayoutHints(kLHintsLeft,10,0,0,0);
  fNLB[0] = new TGTextButton(fNLSub[5],new TGHotString("OK"),kNLTB_OK);
  fNLB[0]->Associate(this);

  fNLB2Lay = new TGLayoutHints(kLHintsRight,0,10,0,0);
  fNLB[1] = new TGTextButton(fNLSub[5],new TGHotString("CANCEL"),kNLTB_CANCEL);
  fNLB[1]->Associate(this);

  fNLh1[0]->AddFrame(fNLf11,fNLfx1Lay);
  fNLh1[1]->AddFrame(fNLf21,fNLfx1Lay);
  fNLh1[2]->AddFrame(fNLf31,fNLfx1Lay);
  fNLh1[3]->AddFrame(fNLf41,fNLfx1Lay);
  fNLh1[4]->AddFrame(fNLf51,fNLfx1Lay);

  fNLh2[0]->AddFrame(fNLf12,fNLfx2Lay);    
  fNLh2[1]->AddFrame(fNLf22,fNLfx2Lay);    
  fNLh2[2]->AddFrame(fNLf32,fNLfx2Lay);    
  fNLh2[3]->AddFrame(fNLf42,fNLfx2Lay);    
  fNLh2[4]->AddFrame(fNLf52,fNLfx2Lay);    

  fNLSub[5]->AddFrame(fNLB[0],fNLB1Lay);
  fNLSub[5]->AddFrame(fNLB[1],fNLB2Lay);

  fNL->AddFrame(fNLName,fNLNameLay);
  for (int i=0;i<fNLMax;i++){
    fNLSub[i]->AddFrame(fNLh1[i],fNLh1Lay);
    fNLSub[i]->AddFrame(fNLh2[i],fNLh1Lay);
    fNL->AddFrame(fNLSub[i],fNLSubLay);
  }
  fNL->AddFrame(fNLId,fNLIdLay);
  fNL->AddFrame(fNLSub[5],fNLSubLay);

  AddFrame(fNL,fNLLay);


  MapSubwindows();
  SetWindowName("New Ladder");
  SetIconName("New Ladder");

  Layout();
  MapWindow();
  gClient->WaitFor(this);
}


Bool_t NewLadder::ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2)
{
  switch (GET_MSG(msg)) {
  case kC_COMMAND:
    switch (GET_SUBMSG(msg)) {
    case kCM_COMBOBOX:
      ProcessComboBox(parm1,parm2); 
      break;
    case kCM_BUTTON:
      ProcessTextButton(parm1,parm2);
      break;
    }
  }
  return kTRUE;
}

void NewLadder::ProcessComboBox(Long_t parm1, Long_t parm2){
  switch (parm1) {
  case kNLCB_VOLTAGE:
    switch (parm2) {
    case 1: fVoltage='L'; break;
    case 2: fVoltage='H'; break;
    }
    break;
  case kNLCB_WAFFERS:
    switch (parm2) {
    case  1: strcpy(fWaffers,"01");  break;
    case  2: strcpy(fWaffers,"02");  break;
    case  3: strcpy(fWaffers,"03");  break;
    case  4: strcpy(fWaffers,"04");  break;
    case  5: strcpy(fWaffers,"05");  break;
    case  6: strcpy(fWaffers,"06");  break;
    case  7: strcpy(fWaffers,"07");  break;
    case  8: strcpy(fWaffers,"08");  break;
    case  9: strcpy(fWaffers,"09");  break;
    case 10: strcpy(fWaffers,"10");  break;
    case 11: strcpy(fWaffers,"11");  break;
    case 12: strcpy(fWaffers,"12");  break;
    case 13: strcpy(fWaffers,"13");  break;
    case 14: strcpy(fWaffers,"14");  break;
    case 15: strcpy(fWaffers,"15");  break;
    }
    break;
  case kNLCB_ASSEMBLY:
    switch (parm2) {
    case 1: fAssembly='G';  break;
    case 2: fAssembly='P';  break;
    case 3: fAssembly='Z';  break;
    case 4: fAssembly='C';  break;
    }
    break;
  case kNLCB_LAYER:
    switch (parm2) {
    case 1: fLayer='I';  break;
    case 2: fLayer='O';  break;
    case 3: fLayer='T';  break;
    }
    break;
  case kNLCB_SERIAL:
    switch (parm2) {
    case 1: strcpy(fSerial,"001");  break;
    case 2: strcpy(fSerial,"002");  break;
    case 3: strcpy(fSerial,"003");  break;
    }
    break;
  }	
  
  fNLId->SetText(new TGString(GetLadderName()));
}


void NewLadder::ProcessTextButton(Long_t parm1, Long_t parm2){
  switch (parm1) {
  case kNLTB_OK:
    Int_t aMessage;
    aMessage=MK_MSG((EWidgetMessageTypes)kC_NEWLADDER,
                  (EWidgetMessageTypes)kNLTB_OK);
    SendMessage(fMain,aMessage,0,0);
    CloseWindow();
    break;
  case kNLTB_CANCEL:
    CloseWindow();
    break;
  }	
}

void NewLadder::CloseWindow(){
  TGTransientFrame::CloseWindow(); 
}

NewLadder::~NewLadder()
{
  delete fNLf11; delete fNLf12;
  delete fNLf21; delete fNLf22;
  delete fNLf31; delete fNLf32;
  delete fNLf41; delete fNLf42;
  delete fNLf51; delete fNLf52;
  delete fNLId;  delete fNLIdLay;
  delete fNLB;   delete fNLB1Lay; delete fNLB2Lay;
  delete fNLfx1Lay; delete fNLfx2Lay;
  delete fNLh1; 
  delete fNLh2; 
  delete fNLName;   
  delete fNLSub;    
  delete fNL;       
  delete fMain;
}
