#!/bin/sh
sqlplus amsdes/@@@@@amsdb  <<!
set echo on
drop table mods;
create  table mods (
tabname varchar2(63),
modtime date
)
/
insert into mods values('jobs', '24-oct-05');
insert into mods values('runs', '25-oct-05');
insert into mods values('datasets','25-oct-05');
insert into mods values('ntuples','25-oct-05');
insert into mods values('fs','25-oct-05'); 
create or replace trigger jobs_biu
after insert or update on jobs
for each row
begin
update mods set modtime=sysdate where tabname='jobs';
end ;
/
show errors

create or replace trigger runs_biu
after insert or update on runs
for each row
begin
update mods set modtime=sysdate where tabname='runs';
end ;
/
show errors

create or replace trigger ntuples_biu
after insert or update on ntuples
for each row
begin
update mods set modtime=sysdate where tabname='ntuples';
end ;
/
show errors

create or replace trigger datasets_biu
after insert or update on datasets
for each row
begin
update mods set modtime=sysdate where tabname='datasets';
end ;
/
show errors

create or replace trigger fs_biu
after insert or update on filesystems 
for each row
begin
update mods set modtime=sysdate where tabname='fs';
end ;
/
show errors


CREATE OR REPLACE
    FUNCTION date_to_unixts(oracle_date IN DATE) RETURN PLS_INTEGER IS
        /**
         * Converts an Oracle DATE to a UNIX timestamp
         */
        unix_epoch DATE := TO_DATE('19700101000000','YYYYMMDDHH24MISS');
        max_date DATE := TO_DATE('20380101000000','YYYYMMDDHH24MISS');
        min_date DATE := TO_DATE('19030101000000','YYYYMMDDHH24MISS');
        unix_ts PLS_INTEGER;
        
        BEGIN
            
            IF oracle_date > max_date THEN
                RAISE_APPLICATION_ERROR( -20902,'Date too large for 32bit UNIX timestamp' );
            ELSIF oracle_date < min_date THEN
                RAISE_APPLICATION_ERROR( -20902,'Date too small for 32bit UNIX timestamp' );
            ELSE
                unix_ts := (oracle_date - unix_epoch) / (1/86400);
            END IF;
            
            RETURN (unix_ts);
        
        END;
/
   show errors


CREATE OR REPLACE
    FUNCTION calcevents (timeleft IN pls_integer, triggers in pls_integer) RETURN pls_integer IS
        /**
         *  funny function to calculate  events number
         */
        factor NUMBER ;
        days NUMBER ;
        eventsleft PLS_INTEGER;
        
        BEGIN
            days := timeleft/86400.;            
            IF days > 14 THEN
                eventsleft := 0;
            ELSIF days <0 THEN
                eventsleft := 0;
            ELSE
                factor := exp(-days);
                eventsleft := triggers*factor;
                 IF eventsleft < 100 THEN 
                  eventsleft := 0;
                 END IF; 
            END IF;
            
            RETURN (triggers-eventsleft);
        
        END;
/
   show errors
!
