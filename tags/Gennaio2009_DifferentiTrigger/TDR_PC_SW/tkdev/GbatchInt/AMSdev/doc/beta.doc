#  $Id: beta.doc,v 1.1.1.1 2007/11/13 09:56:11 zuccon Exp $

/*!
  \file beta.doc 
  \brief  Some docs

integer AMSBeta::patconf[npatb][4]={                             \n
                                      1,2,3,4,        // 1234  0 \n
                                      1,2,3,0,        // 123   1 \n
                                      1,2,4,0,        // 124   2 \n
                                      1,3,4,0,        // 134   3 \n
                                      2,3,4,0,        // 234   4 \n
                                      1,3,0,0,        // 13    5 \n
                                      1,4,0,0,        // 14    6 \n
                                      2,3,0,0,        // 23    7 \n
                                      2,4,0,0};       // 24    8 \n
*/
class AMSBeta: public AMSlink{   // Velocity Reconstruction
protected:
 AMSTOFCluster * _pcluster[4];   // pointers to TOF clusters
 AMSTrTrack * _ptrack;           // pointer to Track
 AMSCTCCluster *_pctc;           // pointer to ctc cluster
 integer _Pattern;               // Pattern (see below)
 number _Beta ;                  // Velocity
 number _InvErrBeta;             // Err(1/beta)  
 number _Chi2;                   // Chi^2 of the fit
//                                                   Pattern config


public:
 AMSBeta(integer pattern, AMSTOFCluster * pcluster[4], AMSTrTrack * ptrack):
         AMSlink(0),_Pattern(pattern),_ptrack(ptrack) // init ctor

 AMSBeta(const AMSBeta & o):   // copy ctor

// Get

number getchi2()const{return _Chi2;}

number getbeta()const{return _Beta;}

number getebeta()const{return _InvErrBeta;}

AMSTrTrack * getptrack()const {return _ptrack;}

AMSTOFCluster * getpcluster(integer i);

//

void SimpleFit(integer nhit, number sleng[]);  // Fit to Velocity

static integer _addnext(integer pat, integer nhit, number sleng[],
AMSTOFCluster *ptr[], AMSTrTrack * ptrack);  // Add next in container

static AMSPoint Distance(AMSPoint coo, AMSPoint ecoo, AMSTrTrack *ptr,
number & sleng);  // Distance in ecoo between track *ptr and coo

static void build();  // build  elements

static void print();  // print all elements

