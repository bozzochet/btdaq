#  $Id: pool.doc,v 1.1.1.1 2007/11/13 09:56:11 zuccon Exp $
// Available linear memory pools 

// pool.h

//
// Template for linear memory pool for class T
// In the contrary to utpool.h,
// EVERY derived from T class SHOULD HAS its own new/delete operators!!!!
// To use template include the following three lines in your class <T> .h file:
//#include <pool.h>
// void * operator new(size_t t) {return AMSPool<T>::insert();}
// void operator delete(void *p){AMSPool<T>::udelete(p);}
//
// ...and following six lines in any  .C file:
// AMSlink ** AMSPool<T>::_iadd=0;
// AMSlink *  AMSPool<T>::_head=0;
// integer    AMSPool<T>::_nblocks=0;
// integer  AMSPool<T>::_nelem=512; //buffer size in sizeof(T), may be changed
// integer    AMSPool<T>::_nchunk=10;
// integer    AMSPool<T>::_esize=sizeof(T);
//
// To delete class instances  with non-trivial destructor use delete operator;
// N.B. AMSutPool.udelete DOES release linear memory also.
// To  delete  linear memory use
// AMSPool<T>::erase(k);
// where k is the residual buffer capacity in sizeof(T); e.g.
// erase(0) will delete all memory; erase(1000000) will
// delete the memory after 1000000 element.
//
// pool.h has about same performance as utpool.h
//


//utpool.h


/
// Template for linear memory pool for class T.
// Derived from T classes CAN use the new/delete operators from  T.
// To use template include the following three lines in your class <T> .h file:
//#include <utpool.h>
// void * operator new(size_t t) {return AMSutPool<T>::insert(t);}
// void operator delete(void *p){AMSutPool<T>::udelete(p);}
//
// ...and following four lines in any  .C file:
//  AMSutPool<T>::dlink * AMSutPool<T>::_head=0;
// integer AMSutPool<T>::_nelem=512;//buffer length in sizeof(T), may be changed
// T * AMSutPool<T>::_free=0;
// integer AMSutPool<T>::_lc=0;
//
// To delete class instances  with non-trivial destructor use delete operator;
// N.B. AMSutPool.udelete DOES NOT release linear memory at all.
// To release and/or delete  linear memory use
// AMSutPool<T>::erase(k);
// where k is the residual buffer capacity in sizeof(T); e.g.
//erase(0) will release then delete all memory; erase(1000000) will release
//then delete the memory after 1000000 element.
//
// Performance measured at cernsp 1.8 sec first then 1.0 sec for 60 mbytes alloc
// prompt new[60 mbytes] 0.5 sec
//


//upool.h

//
//  Universal  linear memory pool for any/all class(es).
// Do NOT requires redefinition of new/delete operators.
// To use it include the following  line in your .h or .C file:
//#include <upool.h>
//
// There is predefined instance of AMSuPool called UPool, compiled in upool.o
// To use it you should include in .C file line
// extern AMSuPool UPool;
//
// Then to create an element of class T use e.g.
// T* p=new(Upool.insert(sizeof(T))) T(...);
// To delete the element use delete;
//
// The pool can be used also for non-class objects  e.g.
//  void * p= Upool.insert(obj_size);
//  UCOPY(&Obj,p,obj_size/4);
//
// To release and/or delete  linear memory use
// Upool.erase(k);
// where k is the residual buffer capacity ; e.g.
//erase(0) will release then delete all memory; erase(1000000) will release all
//memory then delete the memory after 1000000 element.
//
// Instead of UPool you can create and use your own instance of AMSuPool;
//e.g.
// static AMSuPool my_pool;
// AMSuPool my_pool(n); // n - buffer size
// then use my_pool as UPool;
//
// Performance measured at cernsp 1.7 sec first then 0.9 sec for 60 mbytes alloc
// prompt new[60 mbytes] 0.5 sec
//



apool.h             // This is the default

//
//  Universal  linear memory pool for any/all class(es).
// Do NOT requires redefinition of new/delete operators.
// To use it include the following  line in your .h or .C file:
//#include <apool.h>
//
// There is predefined instance of AMSaPool called APool(512000),
// compiled in apool.o
//
// Then to create an element of class T use e.g.
// T* p=new(Apool.insert(sizeof(T))) T(...);
// To delete the element use delete;
//
// The pool can be used also for non-class objects  e.g.
//  void * p= Apool.insert(obj_size);
//  UCOPY(&Obj,p,obj_size/4);
// to delete the elements use udelete(p);
// N.B. AMSaPool.udelete TRIES to release linear memory also
// (not in case of AMSuPool)
//
// To release and/or delete  linear memory use
// Apool.erase(k);
// where k is the residual buffer capacity in bytes ; e.g.
//erase(0) will release then delete all memory; erase(1000000) will release all
//memory then delete the memory after 1000000 bytes.
//
// Instead of APool you can create and use your own instance of AMSaPool;
//e.g.
// AMSaPool my_pool(n); // n - initial buffer size in bytes
// then use my_pool as APool;
//
// Performance measured at cernsp 1.7 sec first then 0.9 sec for 60 mbytes allo\
c
// prompt new[60 mbytes] 0.5 sec
//