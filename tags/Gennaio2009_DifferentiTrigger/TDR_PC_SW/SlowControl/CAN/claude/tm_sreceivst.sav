// file tm_sreceivst.c
// Decoding of TM SRECEIVST
// Claude Zurbach
// August 2008
//
/**/
#include "gpsdef.h"
#include "gpsdef_cz.h"
/**/
#define MAX_OUT 8192
#define MAX_IN 8192
/**/
char search_key_tm[9] = "SRECEIVST";
char buff_in[MAX_IN];
char buff_out[MAX_OUT];
char buff_outf[MAX_OUT];
unsigned char buff_outi[MAX_OUT];
char input_file[40]; 
char output_file[40];
/**/
int number_tm = 0;
int number_raleph = 0;
int error_checksum = 0;
int a, b, c, d, e, f, i, j, k, w, x, y, z;
int start_value = 0;
int end_value = 0;
int lenght_value = 0;
int lenght_final_value = 0;
int32 integer_param;
int32 myCheck;
int32 tmCheck;
int test_char = 0;
int test_end = 0;
int test_check = 0;
int test_tm = 0;
int local_time = 0;
/**/
char ident1_tm[11];
char string1_tm[12] = "9C 3E 26 06\0";
char string2_tm[9] = "9C3E2606\0";
char end_tm[23] = "55 55 55 55 55 55 55 55";
char temp_end_tm[23];
unsigned char value_param[21];
unsigned char value_def[16];
unsigned char output_byte = 0x0;
/**/
unsigned char ascii_tab[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
unsigned char hexa_tab[16] = {0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF};
/**/
FILE *f_in, *f_out;
/**/
/* store_value() */
/**/
void   store_value() {  
       j = 0; 
       integer_param = 0;
       for (j=0; j<lenght_value; j++){
			      integer_param = integer_param << 8;
            integer_param = integer_param + value_param[j];
       }
}
/**/
/* print_format() - extraction of value */
/**/
void   print_format() {  
       switch (TM[5].par[z].fmt[1]) {
       case 'u':
            printf("%u\n", integer_param);
            break;
       case 'd':
            printf("%d\n", integer_param);
            break;  
       default:
            printf("%X\n", integer_param);
       }
}
/**/
/* conversion() */
/**/
void conversion() {
test_char = 0;
      for (y=0; y<16; y++) {
      if (ascii_tab[y] == buff_outf[j])
           output_byte = hexa_tab[y];
      }
}
/**/
/* print_sreceivst() */
/**/
void   print_sreceivst() {
       c=0;
       d=0;
       i=0;
       printf("SRECEIVST - Local Time : %d \n\n",local_time);
       printf(" Byte   | Description                     | Range \n");
       for (i=0; i<54; i++) printf("-");
       printf("\n");
       for (z=0; z <3; z++) {          
           printf(" %d-%d", start_value, end_value);
           if (start_value < 10) printf(" ");
           if (end_value > 9) {printf("    ");} else {printf("     ");};
/**/
/* print denomination */
/**/
	     d=0; 
       if (interpret[c][d] == '&') c++;
       while (interpret[c][d] != '\0') {
		   printf("%c",interpret[c][d]);
		   d++;
       }
/**/
       i=strlen(interpret[c]);
       for (i=i+1; i<35; i++)         
		   printf(" ");
/**/
/* sub-parameters ? */
/**/
       c++;
       d=c;
       if (interpret[d][0] != '&') {
          d=0;
          while (interpret[c][d] != '\0') {
		      printf("%c",interpret[c][d]);
		      d++;
          }}
       else {
          a=TM[5].par[z].bgn;     
          start_value=TM[5].par[z].bgn;     
          b=TM[5].par[z].end;
          end_value=TM[5].par[z].end;
          lenght_value=((b-a)+1);
/**/           
          for (e=0; e < lenght_value; e++) {
              value_param[e] = buff_outi[a];
              a++;
              }
          store_value();
          print_format();
       }}
}
/**/
/* checksum_test() */
/**/
void  checksum_test()
{
int e = 0;
int f = 8;
/**/
       tmCheck = 0;
       test_check = 0;
       sscanf(&buff_outf[0], "%8X", &myCheck);
/**/
       for (e=0; e<16; f=f+8) {
           sscanf(&buff_outf[f], "%8X", &integer_param);
           tmCheck = tmCheck + integer_param;
           e++;
       }
       if (tmCheck == myCheck) {
           test_check = 1;  
       }
}
/**/
/* compact() */
/**/
void   compact() {
       j = 8; 
       k = 0;
	     lenght_value = 144;
       while (j < lenght_value) {
            conversion();
            buff_outi[k] = output_byte;
            buff_outi[k] = buff_outi[k] * 16;
            j++;
            conversion();
            buff_outi[k] = buff_outi[k] + output_byte;
            k++;
            j++;
            }
       value_def[k] = '\0';
       }
/**/
/* test_end_tm() */
/**/
void   test_end_tm() {
       test_end = 0;
	     b = i;
/**/
	     for (a=0; a <22; a++){
          temp_end_tm[a] = buff_in[b];
		      b++;
          }
	     temp_end_tm[a] = '\0';
       if (strcmp(temp_end_tm, end_tm) == 0){
		      test_end = 1;
	        }
       }
/**/
int main(int argc, char *argv[]) 
{
     setbuf(stdout, NULL);
     printf ("usage : %s file name \n", argv[0]);
     if (argc < 2) exit(1);
     strcpy (input_file, argv[1]);
/**/
/* Opening of input file */
/**/
     if ((f_in = fopen(input_file,"r")) == NULL) {
          fprintf(stderr, "\nError in reading file %s\n", argv[1]);
          return(1);
     }   
/**/
/* Read input until SRECEIVST found */
/**/
          fgets(buff_in, MAX_IN, f_in);
          if (buff_in[0] == '9'){
          for (i=0; i <11; i++){
               ident1_tm[i] = buff_in[i];
               }
               ident1_tm[i] = '\0';
          if (strcmp(ident1_tm, string1_tm) == 0){
          		 number_tm++;
               i = 0;
               while (buff_in[i] !='\n'){
				           if (buff_in[i] == '5'){
						       test_end_tm();
						       if (test_end == 1){
						       }
					         }
                   if (buff_in[i] !=' '){
                       buff_out[y] = buff_in[i];
                       y++;
                   }
                   i++;
                   }
               }
          }
     buff_out[y] = '\0';    
     fclose(f_in);
/**/
     if (number_tm == 0) {
          fprintf(stderr, "\nNo TM RECEIVST found : %d\n\n", number_tm);
          return(1);
     }
/**/      
          i=0;
          y=0;
          w=0;
          x=8;
          number_tm = 0;
/**/      
          for (y=w+8; y < w+144; y++) {
          buff_outf[i] = buff_out[x];
          i++;
          x++;
          }
      buff_outf[i] = '\0';
      number_tm++;
/**/
      checksum_test();
      if (test_check == 0) {
      error_checksum++;  
      }
/**/
      compact();
      printf("TM SRECEIVST : \n");
	    for (y=0; y<64; y++)
      printf("%02X",buff_outi[y]);
      printf("\n\n");
/**/
      print_sreceivst();
      
      printf("\n\nTM SRECEIVST checksum error : %d\n", error_checksum); 
/**/
      return (0);
}
