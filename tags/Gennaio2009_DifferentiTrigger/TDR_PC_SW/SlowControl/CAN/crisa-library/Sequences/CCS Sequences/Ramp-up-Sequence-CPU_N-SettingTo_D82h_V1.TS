/// RAMP UP SEQUENCE (26 June 2008)
/// Power 28V_N ON
   9:SET PS OUTPUT VOLTAGE         :PWS-02, 28V_POWER_BUS_N, 28000
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 14, SEC
   2:SELECT CAB CPU                :UTC-03, CPU_N
/// CPU_N in Start up state
   7:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  13:SEND COMMAND                  :CAN-02, C0A, CAB_LATCHUP_PROTECT_ENABLE.CMM, 0
  14:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  16:SEND COMMAND                  :CAN-02, C18, CAB_LOAD_APSW_SW_PROGRAM_1.CMM, 0
  17:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 5, SEC
  18:SEND COMMAND                  :CAN-02, C1B, CAB_GO_APSW.CMM, 0
  19:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
  20:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Power 28V_R ON
   9:SET PS OUTPUT VOLTAGE         :PWS-02, 28V_POWER_BUS_R, 28000
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 14, SEC
   2:SELECT CAB CPU                :UTC-03, CPU_R
/// CPU_R in Start up state
   7:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  13:SEND COMMAND                  :CAN-02, C0A, CAB_LATCHUP_PROTECT_ENABLE.CMM, 0
  14:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Power CSP Electronis ON from CPU_N
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 14, SEC
  37:SEND COMMAND                  :CAN-02, CB7, CSP_ON_OFF_CONVERTERS_CL1_ON.CMM, 0
  38:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  39:SEND COMMAND                  :CAN-02, CB7, CSP_ON_OFF_CONVERTERS_CL2_ON.CMM, 0
  40:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  41:SEND COMMAND                  :CAN-02, CB7, CSP_ON_OFF_CONVERTERS_CL3_ON.CMM, 0
  42:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 5, SEC
  44:SEND COMMAND                  :CAN-02, CB7, CSP_ON_OFF_CONVERTERS_MD1_ON.CMM, 0
  45:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  46:SEND COMMAND                  :CAN-02, CB7, CSP_ON_OFF_CONVERTERS_MD2_ON.CMM, 0
  47:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  48:SEND COMMAND                  :CAN-02, CB7, CSP_ON_OFF_CONVERTERS_MD3_ON.CMM, 0
  49:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 5, SEC
  51:SEND COMMAND                  :CAN-02, CB7, CSP_ON_OFF_CONVERTERS_CTRL_NOM_ON.CMM, 0
  52:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  61:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 5, SEC
  64:SEND COMMAND                  :CAN-02, CB7, CSP_ON_OFF_CONVERTERS_CTRL_RED_ON.CMM, 0
  65:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  61:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 5, SEC
/// Nominal & Redundant Battery Charger LCL first OFF and then ON from CPU_N
   1:SEND COMMAND                  :CAN-02, CB8, CAB_ON_OFF_LCL_NOM_OFF.CMM, 0
   2:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
   5:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 10, SEC
   7:SEND COMMAND                  :CAN-02, CB8, CAB_ON_OFF_LCL_NOM_ON.CMM, 0
   8:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
   5:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 5, SEC
   4:SEND COMMAND                  :CAN-02, CB8, CAB_ON_OFF_LCL_RED_OFF.CMM, 0
  11:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
   5:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 10, SEC
  10:SEND COMMAND                  :CAN-02, CB8, CAB_ON_OFF_LCL_RED_ON.CMM, 0
  11:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Nominal CPU is active
/// CSP_N FPGA_1N &  FPGA_2N Parameter Configuration from CPU_N
// 1:SEND COMMAND                  :CAN-02, C95, CSP_RDS_CONFIGURATION_1N_TRDS1_180min_NOM.CMM   // replaced by AL
// 1:SEND COMMAND                  :CAN-02, C95, CSP_RDS_CONFIGURATION_2N_TRDS1_180min_NOM.CMM   // replaced by AL
   1:SEND COMMAND                  :CAN-02, C93, CSP_RDS_CONFIGURATION_1N_TRDS1_180min_NOM.CMM   // replaced by AL
   1:SEND COMMAND                  :CAN-02, C93, CSP_RDS_CONFIGURATION_2N_TRDS1_180min_NOM.CMM   // replaced by AL
   5:SEND COMMAND                  :CAN-02, CCC, CSP_GET_RDS_AQS_CONFIGURATION_1N.CMM, 0
   7:SEND COMMAND                  :CAN-02, CCC, CSP_GET_RDS_AQS_CONFIGURATION_2N.CMM, 0
/// CSP_R FPGA_1R &  FPGA_2R Parameter Configuration from CPU_N
// 1:SEND COMMAND                  :CAN-02, C95, CSP_RDS_CONFIGURATION_1R_TRDS1_180min_RED.CMM   // replaced by AL
// 1:SEND COMMAND                  :CAN-02, C95, CSP_RDS_CONFIGURATION_2R_TRDS1_180min_RED.CMM   // replaced by AL
   1:SEND COMMAND                  :CAN-02, C93, CSP_RDS_CONFIGURATION_1R_TRDS1_180min_RED.CMM   // replaced by AL
   1:SEND COMMAND                  :CAN-02, C93, CSP_RDS_CONFIGURATION_2R_TRDS1_180min_RED.CMM   // replaced by AL
   5:SEND COMMAND                  :CAN-02, CCC, CSP_GET_RDS_AQS_CONFIGURATION_1R.CMM, 0
   7:SEND COMMAND                  :CAN-02, CCC, CSP_GET_RDS_AQS_CONFIGURATION_2R.CMM, 0
/// Nominal CPU passes to inactive state
   1:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_SUSW.CMM, 0
/// Nominal CPU is inactive, now Redundant CPU passes to active state
   2:SELECT CAB CPU                :UTC-03, CPU_R
  12:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_APSW.CMM, 0
  13:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 6, SEC
  14:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Redundant CPU is active
/// Power CSP Electronis ON from CPU_R
   7:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Power CSP Electronis ON from CPU_R
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 14, SEC
  37:SEND COMMAND                  :CAN-02, CB7, CSP_ON_OFF_CONVERTERS_CL1_ON.CMM, 0
  38:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  39:SEND COMMAND                  :CAN-02, CB7, CSP_ON_OFF_CONVERTERS_CL2_ON.CMM, 0
  40:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  41:SEND COMMAND                  :CAN-02, CB7, CSP_ON_OFF_CONVERTERS_CL3_ON.CMM, 0
  42:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 5, SEC
  44:SEND COMMAND                  :CAN-02, CB7, CSP_ON_OFF_CONVERTERS_MD1_ON.CMM, 0
  45:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  46:SEND COMMAND                  :CAN-02, CB7, CSP_ON_OFF_CONVERTERS_MD2_ON.CMM, 0
  47:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  48:SEND COMMAND                  :CAN-02, CB7, CSP_ON_OFF_CONVERTERS_MD3_ON.CMM, 0
  49:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 5, SEC
  51:SEND COMMAND                  :CAN-02, CB7, CSP_ON_OFF_CONVERTERS_CTRL_NOM_ON.CMM, 0
  52:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  61:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 5, SEC
  64:SEND COMMAND                  :CAN-02, CB7, CSP_ON_OFF_CONVERTERS_CTRL_RED_ON.CMM, 0
  65:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  61:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 5, SEC
/// Nominal & Redundant Battery Charger LCL first OFF and then ON from CPU_R
   1:SEND COMMAND                  :CAN-02, CB8, CAB_ON_OFF_LCL_NOM_OFF.CMM, 0
   2:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
   5:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 10, SEC
   7:SEND COMMAND                  :CAN-02, CB8, CAB_ON_OFF_LCL_NOM_ON.CMM, 0
   8:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
   5:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 5, SEC
   4:SEND COMMAND                  :CAN-02, CB8, CAB_ON_OFF_LCL_RED_OFF.CMM, 0
  11:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
   5:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 10, SEC
  10:SEND COMMAND                  :CAN-02, CB8, CAB_ON_OFF_LCL_RED_ON.CMM, 0
  11:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Redundant CPU is active
/// CSP_N FPGA_1N &  FPGA_2N Parameter Configuration from CPU_R
// 1:SEND COMMAND                  :CAN-02, C95, CSP_RDS_CONFIGURATION_1N_TRDS1_180min_NOM.CMM   // replaced by AL
// 1:SEND COMMAND                  :CAN-02, C95, CSP_RDS_CONFIGURATION_2N_TRDS1_180min_NOM.CMM   // replaced by AL
   1:SEND COMMAND                  :CAN-02, C93, CSP_RDS_CONFIGURATION_1N_TRDS1_180min_NOM.CMM   // replaced by AL
   1:SEND COMMAND                  :CAN-02, C93, CSP_RDS_CONFIGURATION_2N_TRDS1_180min_NOM.CMM   // replaced by AL
   5:SEND COMMAND                  :CAN-02, CCC, CSP_GET_RDS_AQS_CONFIGURATION_1N.CMM, 0
   7:SEND COMMAND                  :CAN-02, CCC, CSP_GET_RDS_AQS_CONFIGURATION_2N.CMM, 0
/// CSP_R FPGA_1R &  FPGA_2R Parameter Configuration from CPU_R
// 1:SEND COMMAND                  :CAN-02, C95, CSP_RDS_CONFIGURATION_1R_TRDS1_180min_RED.CMM   // replaced by AL
// 1:SEND COMMAND                  :CAN-02, C95, CSP_RDS_CONFIGURATION_2R_TRDS1_180min_RED.CMM   // replaced by AL
   1:SEND COMMAND                  :CAN-02, C93, CSP_RDS_CONFIGURATION_1R_TRDS1_180min_RED.CMM   // replaced by AL
   1:SEND COMMAND                  :CAN-02, C93, CSP_RDS_CONFIGURATION_2R_TRDS1_180min_RED.CMM   // replaced by AL
   5:SEND COMMAND                  :CAN-02, CCC, CSP_GET_RDS_AQS_CONFIGURATION_1R.CMM, 0
   7:SEND COMMAND                  :CAN-02, CCC, CSP_GET_RDS_AQS_CONFIGURATION_2R.CMM, 0
/// Redundant CPU passes to inactive state
   1:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_SUSW.CMM, 0
/// Redundant CPU is inactive, now Nominal CPU passes to active state
   2:SELECT CAB CPU                :UTC-03, CPU_N
  12:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_APSW.CMM, 0
  13:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 6, SEC
  14:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Nominal CPU is active
/// Nominal CPU is in active state and controls the CCS electronics configuration
   3:REQUEST MESSAGE               :GEP-05, POWER-ON 120V PS, NONE
/// 120V bus has to be powered ON
 /// Sequence to close the CL Diconnectors starts from CPU_N
/// Execute the following steps of the Ramp Down sequence from Step-1.1 to Step-6.4, detailed below
/// Power CD TMP HTR OFF
   1:SEND COMMAND                  :CAN-02, CE1, CSP_ARM_DISARM_HEATER_NOM_ARM_OFF_CD.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   4:SEND COMMAND                  :CAN-02, CE2, CSP_OPERATE_HEATER_NOM.CMM, 0
   5:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE1, CSP_ARM_DISARM_HEATER_RED_ARM_OFF_CD.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CE2, CSP_OPERATE_HEATER_RED.CMM, 0
   5:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
/// Open SC_SW
   2:SEND COMMAND                  :CAN-02, C53, CCS_COMMANDING_ARM_DISARM_ARM.CMM, 0
   3:SEND COMMAND                  :CAN-02, C4B, CCS_OPEN_CLOSE_SEMIC_SW_OPEN.CMM, 0
// 4:SEND COMMAND                  :CAN-02, C4D, CCS_ENA_DIS_OUTPUT_DISABLE.CMM, 0                   // replaced by AL
   4:SEND COMMAND                  :CAN-02, C4D, CCS_ENA_DIS_OUTPUT_DIS.CMM, 0                       // replaced by AL
   5:SEND COMMAND                  :CAN-02, C4E, CCS_ON_OFF_CONVERTERS_ALL_OFF.CMM, 0
// 6:SEND COMMAND                  :CAN-02, C53, CCS_COMMANDING_ARM_DISARM_DISARM.CMM, 0             // replaced by AL
   6:SEND COMMAND                  :CAN-02, C53, CCS_COMMANDING_ARM_DISARM_DIS.CMM, 0                // replaced by AL
   9:SEND COMMAND                  :CAN-02, C05, CAB_GET_DIGITAL_STATUS_NOM.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
/// Open the Moog Valves DV22A,  B, C & D
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_NOM_ARM_OPEN_V22A.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_NOM_ARM_OPEN_V22C.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_RED_ARM_OPEN_V22B.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_RED.CMM, 0
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_RED_ARM_OPEN_V22D.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_NOM.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// Power CL TMP HTR ON
   1:SEND COMMAND                  :CAN-02, CE1, CSP_ARM_DISARM_HEATER_NOM_ARM_ON_CL.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   4:SEND COMMAND                  :CAN-02, CE2, CSP_OPERATE_HEATER_NOM.CMM, 0
   5:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE1, CSP_ARM_DISARM_HEATER_RED_ARM_ON_CL.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CE2, CSP_OPERATE_HEATER_RED.CMM, 0
   5:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   7:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 10, SEC
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// Open the CL valves DV56A-B
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_NOM_ARM_OPEN_V56A.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_NOM.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_RED_ARM_OPEN_V56B.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_RED.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 600, SEC
/// Open the Disconnector pilot valves A, B, C & D
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_NOM_ARM_OPEN_V21A.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_NOM.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_NOM_ARM_OPEN_V21C.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_NOM.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_RED_ARM_OPEN_V21B.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_RED.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_RED_ARM_OPEN_V21D.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_RED.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// CL Detection function is Enabled autonomuously
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// The CL Diconnectors have been closed
/// Sequence to close the CL Diconnectors is finished from CPU_N
/// Nominal CPU passes to inactive state
   1:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_SUSW.CMM, 0
/// Nominal CPU is inactive, now Redundant CPU passes to active state
   2:SELECT CAB CPU                :UTC-03, CPU_R
  12:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_APSW.CMM, 0
  13:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 6, SEC
  14:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Redundant CPU is active
/// Sequence to close the CL Diconnectors starts from CPU_R
/// Execute the following steps of the Ramp Down sequence from Step-1.1 to Step-6.4, detailed below
/// Power CD TMP HTR OFF
   1:SEND COMMAND                  :CAN-02, CE1, CSP_ARM_DISARM_HEATER_NOM_ARM_OFF_CD.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   4:SEND COMMAND                  :CAN-02, CE2, CSP_OPERATE_HEATER_NOM.CMM, 0
   5:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE1, CSP_ARM_DISARM_HEATER_RED_ARM_OFF_CD.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CE2, CSP_OPERATE_HEATER_RED.CMM, 0
   5:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
/// Open SC_SW
   2:SEND COMMAND                  :CAN-02, C53, CCS_COMMANDING_ARM_DISARM_ARM.CMM, 0
   3:SEND COMMAND                  :CAN-02, C4B, CCS_OPEN_CLOSE_SEMIC_SW_OPEN.CMM, 0
// 4:SEND COMMAND                  :CAN-02, C4D, CCS_ENA_DIS_OUTPUT_DISABLE.CMM, 0                   // replaced by AL
   4:SEND COMMAND                  :CAN-02, C4D, CCS_ENA_DIS_OUTPUT_DIS.CMM, 0                       // replaced by AL
   5:SEND COMMAND                  :CAN-02, C4E, CCS_ON_OFF_CONVERTERS_ALL_OFF.CMM, 0
// 6:SEND COMMAND                  :CAN-02, C53, CCS_COMMANDING_ARM_DISARM_DISARM.CMM, 0             // replaced by AL
   6:SEND COMMAND                  :CAN-02, C53, CCS_COMMANDING_ARM_DISARM_DIS.CMM, 0                // replaced by AL
   9:SEND COMMAND                  :CAN-02, C05, CAB_GET_DIGITAL_STATUS_NOM.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
/// Open the Moog Valves DV22A, B, C & D
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_NOM_ARM_OPEN_V22A.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_NOM_ARM_OPEN_V22C.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_RED_ARM_OPEN_V22B.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_RED.CMM, 0
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_RED_ARM_OPEN_V22D.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_NOM.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// Power CL TMP HTR ON
   1:SEND COMMAND                  :CAN-02, CE1, CSP_ARM_DISARM_HEATER_NOM_ARM_ON_CL.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   4:SEND COMMAND                  :CAN-02, CE2, CSP_OPERATE_HEATER_NOM.CMM, 0
   5:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE1, CSP_ARM_DISARM_HEATER_RED_ARM_ON_CL.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CE2, CSP_OPERATE_HEATER_RED.CMM, 0
   5:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   7:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 10, SEC
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// Open the CL valves DV56A-B
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_NOM_ARM_OPEN_V56A.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_NOM.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_RED_ARM_OPEN_V56B.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_RED.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 600, SEC
/// Open the Disconnector pilot valves A, B, C & D
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_NOM_ARM_OPEN_V21A.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_NOM.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_NOM_ARM_OPEN_V21C.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_NOM.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_RED_ARM_OPEN_V21B.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_RED.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_RED_ARM_OPEN_V21D.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_RED.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// CL Detection function is Enabled autonomuously
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// The CL Diconnectors have been closed
/// Sequence to close the CL Diconnectors is finished from CPU_R
/// Redundant CPU passes to inactive state
   1:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_SUSW.CMM, 0
/// Redundant CPU is inactive, now Nominal CPU passes to active state
   2:SELECT CAB CPU                :UTC-03, CPU_N
  12:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_APSW.CMM, 0
  13:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 6, SEC
  14:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// CCS electronics configuration to ON state
/// Nominal CPU is active
/// Sequence for CCS electronics configuration ON starts
/// Nominal CPU is in active state and controls the CCS electronics configuration ON
   1:SEND COMMAND                  :CAN-02, C7E, PS_INTERPOINT_DRIVER_ON_OFF_NOM_ON.CMM, 0 
   4:SEND COMMAND                  :CAN-02, C53, CCS_COMMANDING_ARM_DISARM_ARM.CMM, 0
   5:SEND COMMAND                  :CAN-02, C4E, CCS_ON_OFF_CONVERTERS_ALL_ON.CMM, 0
   6:SEND COMMAND                  :CAN-02, C05, CAB_GET_DIGITAL_STATUS_NOM.CMM, 0
   7:SEND COMMAND                  :CAN-02, C4B, CCS_OPEN_CLOSE_SEMIC_SW_CLOSE.CMM, 0
// 8:SEND COMMAND                  :CAN-02, C4D, CCS_ENA_DIS_OUTPUT_ENABLE.CMM, 0                   // replaced by AL
   8:SEND COMMAND                  :CAN-02, C4D, CCS_ENA_DIS_OUTPUT_ENA.CMM, 0                      // replaced by AL
// 9:SEND COMMAND                  :CAN-02, C53, CCS_COMMANDING_ARM_DISARM_DISARM.CMM, 0            // replaced by AL
   9:SEND COMMAND                  :CAN-02, C53, CCS_COMMANDING_ARM_DISARM_DIS.CMM, 0               // replaced by AL
  10:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Nominal CPU passes to inactive state
   1:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_SUSW.CMM, 0
/// Nominal CPU is inactive, now Redundant CPU passes to active state
   2:SELECT CAB CPU                :UTC-03, CPU_R
  12:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_APSW.CMM, 0
  13:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 6, SEC
  14:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Redundant CPU is active
/// Redundant CPU is in active state and controls the CCS electronics configuration ON
   1:SEND COMMAND                  :CAN-02, C7E, PS_INTERPOINT_DRIVER_ON_OFF_RED_ON.CMM, 0
   4:SEND COMMAND                  :CAN-02, C53, CCS_COMMANDING_ARM_DISARM_ARM.CMM, 0
   5:SEND COMMAND                  :CAN-02, C4E, CCS_ON_OFF_CONVERTERS_ALL_ON.CMM, 0
   6:SEND COMMAND                  :CAN-02, C05, CAB_GET_DIGITAL_STATUS_RED.CMM, 0
   7:SEND COMMAND                  :CAN-02, C4B, CCS_OPEN_CLOSE_SEMIC_SW_CLOSE.CMM, 0
// 8:SEND COMMAND                  :CAN-02, C4D, CCS_ENA_DIS_OUTPUT_ENABLE.CMM, 0                   // replaced by AL
   8:SEND COMMAND                  :CAN-02, C4D, CCS_ENA_DIS_OUTPUT_ENA.CMM, 0                      // replaced by AL
// 9:SEND COMMAND                  :CAN-02, C53, CCS_COMMANDING_ARM_DISARM_DISARM.CMM, 0            // replaced by AL
   9:SEND COMMAND                  :CAN-02, C53, CCS_COMMANDING_ARM_DISARM_DIS.CMM, 0               // replaced by AL
  10:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Sequence for CCS electronics configuration ON is finished
/// Redundant CPU passes to inactive state
   1:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_SUSW.CMM, 0
/// Redundant CPU is inactive, now Nominal CPU passes to active state
   2:SELECT CAB CPU                :UTC-03, CPU_N
  12:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_APSW.CMM, 0
  13:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 6, SEC
  14:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Nominal CPU is active
/// Persistent switch HTR ON (N & R)
   1:SEND COMMAND                  :CAN-02, CE1, CSP_ARM_DISARM_HEATER_NOM_ARM_ON_PS.CMM, 0
   4:SEND COMMAND                  :CAN-02, CE2, CSP_OPERATE_HEATER_NOM.CMM, 0
   5:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   7:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE1, CSP_ARM_DISARM_HEATER_RED_ARM_ON_PS.CMM, 0
   4:SEND COMMAND                  :CAN-02, CE2, CSP_OPERATE_HEATER_RED.CMM, 0
   5:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   7:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// CCS Current Set point commands for ramp-up ON
/// Maximum temperature at CAB baseplate level has to be lower than TBC value at the beginning of Ramping (6 CCS converters are operating)
/// Maximum temperature at CAB baseplate level has to be lower than TBC value at the beginning of Ramping (5 CCS converters are operating)
   4:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
/// CCS Current Set point commands to achieve the 390.6Amps foreseen Full Current
/// Magnet Current Shunt Resistance has a value of 106.8 micro-ohms for CAB FM model (104.8 micro-ohms for CAB EM model)
/// For CAB FM model at 390.6Amps Full Current, the setting value is D82h Hexadecimal Code (3458d decimal code)
   5:INFO MESSAGE                  :GEP-06, Start sequence, NONE
   6:SEND COMMAND                  :CAN-02, C41, CCS_CURRENT_SETPOINT_SEQ_CURR1_D82h.cmm, 0
   8:SEND COMMAND                  :CAN-02, C41, CCS_CURRENT_SETPOINT_SEQ_CURR2_D82h.cmm, 0
  10:SEND COMMAND                  :CAN-02, C41, CCS_CURRENT_SETPOINT_SEQ_CURR3_D82h.cmm, 0
  11:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
   1:SEND COMMAND                  :CAN-02, C21, STM_ACQUIRE_NOM_ENER_ENA.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
   2:SEND COMMAND                  :CAN-02, C22, STM_READ_NOM.CMM, 0
  14:SEND COMMAND                  :CAN-02, C39, CCS_START_CURRENT_SETPOINT_SEQ_V1.CMM, 0
  15:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 30, SEC
/// Persistent switch HTR OFF (N & R)
   1:SEND COMMAND                  :CAN-02, CE1, CSP_ARM_DISARM_HEATER_NOM_ARM_OFF_PS.CMM, 0
   4:SEND COMMAND                  :CAN-02, CE2, CSP_OPERATE_HEATER_NOM.CMM, 0
   5:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   7:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE1, CSP_ARM_DISARM_HEATER_RED_ARM_OFF_PS.CMM, 0
   4:SEND COMMAND                  :CAN-02, CE2, CSP_OPERATE_HEATER_RED.CMM, 0
   5:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   7:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Persistent switches N & R have been open
/// Maximum temperature at CAB baseplate level has to be lower than 61ºC value at the end of Ramping (6 CCS converters are operating)
/// Maximum temperature at CAB baseplate level has to be lower than 37ºC value at the end of Ramping (5 CCS converters are operating)
/// The wait states added corresponds to a ramp-up sequence at full current of 390.6A
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 70, SEC
  18:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 500, SEC
  19:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
  25:SEND COMMAND                  :CAN-02, C47, CCS_ANALOG_TM_ACQUIRE.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
  26:SEND COMMAND                  :CAN-02, C48, CCS_READ_ANALOG_TM.CMM, 0
   1:SEND COMMAND                  :CAN-02, C21, STM_ACQUIRE_NOM_ENER_ENA.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
   2:SEND COMMAND                  :CAN-02, C22, STM_READ_NOM.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1200, SEC
  19:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
  25:SEND COMMAND                  :CAN-02, C47, CCS_ANALOG_TM_ACQUIRE.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
  26:SEND COMMAND                  :CAN-02, C48, CCS_READ_ANALOG_TM.CMM, 0
   1:SEND COMMAND                  :CAN-02, C21, STM_ACQUIRE_NOM_ENER_ENA.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
   2:SEND COMMAND                  :CAN-02, C22, STM_READ_NOM.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1800, SEC
  19:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
  25:SEND COMMAND                  :CAN-02, C47, CCS_ANALOG_TM_ACQUIRE.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
  26:SEND COMMAND                  :CAN-02, C48, CCS_READ_ANALOG_TM.CMM, 0
   1:SEND COMMAND                  :CAN-02, C21, STM_ACQUIRE_NOM_ENER_ENA.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
   2:SEND COMMAND                  :CAN-02, C22, STM_READ_NOM.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1800, SEC
  19:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
  25:SEND COMMAND                  :CAN-02, C47, CCS_ANALOG_TM_ACQUIRE.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
  26:SEND COMMAND                  :CAN-02, C48, CCS_READ_ANALOG_TM.CMM, 0
   1:SEND COMMAND                  :CAN-02, C21, STM_ACQUIRE_NOM_ENER_ENA.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
   2:SEND COMMAND                  :CAN-02, C22, STM_READ_NOM.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1800, SEC
  19:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
  25:SEND COMMAND                  :CAN-02, C47, CCS_ANALOG_TM_ACQUIRE.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
  26:SEND COMMAND                  :CAN-02, C48, CCS_READ_ANALOG_TM.CMM, 0
   1:SEND COMMAND                  :CAN-02, C21, STM_ACQUIRE_NOM_ENER_ENA.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
   2:SEND COMMAND                  :CAN-02, C22, STM_READ_NOM.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 300, SEC
  19:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
  25:SEND COMMAND                  :CAN-02, C47, CCS_ANALOG_TM_ACQUIRE.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
  26:SEND COMMAND                  :CAN-02, C48, CCS_READ_ANALOG_TM.CMM, 0
  32:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Ramp up Stabilization Time starts
   1:SEND COMMAND                  :CAN-02, C21, STM_ACQUIRE_NOM_ENER_ENA.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
   2:SEND COMMAND                  :CAN-02, C22, STM_READ_NOM.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 180, SEC
  25:SEND COMMAND                  :CAN-02, C47, CCS_ANALOG_TM_ACQUIRE.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
  26:SEND COMMAND                  :CAN-02, C48, CCS_READ_ANALOG_TM.CMM, 0
/// The Magnet Current is stable at this time
   1:SEND COMMAND                  :CAN-02, C21, STM_ACQUIRE_NOM_ENER_ENA.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
   2:SEND COMMAND                  :CAN-02, C22, STM_READ_NOM.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 120, SEC
  25:SEND COMMAND                  :CAN-02, C47, CCS_ANALOG_TM_ACQUIRE.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
  26:SEND COMMAND                  :CAN-02, C48, CCS_READ_ANALOG_TM.CMM, 0
   1:SEND COMMAND                  :CAN-02, C21, STM_ACQUIRE_NOM_ENER_ENA.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
   2:SEND COMMAND                  :CAN-02, C22, STM_READ_NOM.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 300, SEC
  25:SEND COMMAND                  :CAN-02, C47, CCS_ANALOG_TM_ACQUIRE.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
  26:SEND COMMAND                  :CAN-02, C48, CCS_READ_ANALOG_TM.CMM, 0
   1:SEND COMMAND                  :CAN-02, C21, STM_ACQUIRE_NOM_ENER_ENA.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
   2:SEND COMMAND                  :CAN-02, C22, STM_READ_NOM.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 300, SEC
  25:SEND COMMAND                  :CAN-02, C47, CCS_ANALOG_TM_ACQUIRE.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
  26:SEND COMMAND                  :CAN-02, C48, CCS_READ_ANALOG_TM.CMM, 0
   1:SEND COMMAND                  :CAN-02, C21, STM_ACQUIRE_NOM_ENER_ENA.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
   2:SEND COMMAND                  :CAN-02, C22, STM_READ_NOM.CMM, 0
/// Ramp up Stabilization Time have been finished
/// CCS Current Set point commands for ramp-up OFF
   4:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
   5:INFO MESSAGE                  :GEP-06, Start sequence, NONE
   6:SEND COMMAND                  :CAN-02, C41, CCS_CURRENT_SETPOINT_SEQ_CURR1_0H.CMM, 0
   8:SEND COMMAND                  :CAN-02, C41, CCS_CURRENT_SETPOINT_SEQ_CURR2_0H.CMM, 0
  10:SEND COMMAND                  :CAN-02, C41, CCS_CURRENT_SETPOINT_SEQ_CURR3_0H.CMM, 0
  11:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
  12:SEND COMMAND                  :CAN-02, C39, CCS_START_CURRENT_SETPOINT_SEQ_V1.CMM, 0
  16:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
  17:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
  18:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
  19:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
  20:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
  21:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
  25:SEND COMMAND                  :CAN-02, C47, CCS_ANALOG_TM_ACQUIRE.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
  26:SEND COMMAND                  :CAN-02, C48, CCS_READ_ANALOG_TM.CMM, 0
   1:SEND COMMAND                  :CAN-02, C21, STM_ACQUIRE_NOM_ENER_ENA.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
   2:SEND COMMAND                  :CAN-02, C22, STM_READ_NOM.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
  22:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
  23:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
  24:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
  25:SEND COMMAND                  :CAN-02, C47, CCS_ANALOG_TM_ACQUIRE.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
  26:SEND COMMAND                  :CAN-02, C48, CCS_READ_ANALOG_TM.CMM, 0
   1:SEND COMMAND                  :CAN-02, C21, STM_ACQUIRE_NOM_ENER_ENA.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
   2:SEND COMMAND                  :CAN-02, C22, STM_READ_NOM.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
  25:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 360, SEC
  26:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
  25:SEND COMMAND                  :CAN-02, C47, CCS_ANALOG_TM_ACQUIRE.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
  26:SEND COMMAND                  :CAN-02, C48, CCS_READ_ANALOG_TM.CMM, 0
   1:SEND COMMAND                  :CAN-02, C21, STM_ACQUIRE_NOM_ENER_ENA.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 1, SEC
   2:SEND COMMAND                  :CAN-02, C22, STM_READ_NOM.CMM, 0
/// The wait states added corresponds to a ramp-up OFF sequence at speed rate of V1
  64:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// CCS Current Set point commands for ramp-up OFF stage is finished
   1:SEND COMMAND                  :CAN-02, C44, CCS_READ_SETPOINT_CMDS.cmm, 0
/// Before starting CCS electronics configuration OFF, the programmed current setpoint must be 000h
/// Nominal CPU is in active state and controls the CCS electronics configuration OFF
   2:SEND COMMAND                  :CAN-02, C53, CCS_COMMANDING_ARM_DISARM_ARM.CMM, 0
   3:SEND COMMAND                  :CAN-02, C4B, CCS_OPEN_CLOSE_SEMIC_SW_OPEN.CMM, 0
// 4:SEND COMMAND                  :CAN-02, C4D, CCS_ENA_DIS_OUTPUT_DISABLE.CMM, 0                   // replaced by AL
   4:SEND COMMAND                  :CAN-02, C4D, CCS_ENA_DIS_OUTPUT_DIS.CMM, 0                       // replaced by AL
   5:SEND COMMAND                  :CAN-02, C4E, CCS_ON_OFF_CONVERTERS_ALL_OFF.CMM, 0
// 6:SEND COMMAND                  :CAN-02, C53, CCS_COMMANDING_ARM_DISARM_DISARM.CMM, 0             // replaced by AL
   6:SEND COMMAND                  :CAN-02, C53, CCS_COMMANDING_ARM_DISARM_DIS.CMM, 0                // replaced by AL
   8:SEND COMMAND                  :CAN-02, C7E, PS_INTERPOINT_DRIVER_ON_OFF_NOM_OFF.CMM, 0
   9:SEND COMMAND                  :CAN-02, C05, CAB_GET_DIGITAL_STATUS_NOM.CMM, 0
  10:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Nominal CPU passes to inactive state
   1:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_SUSW.CMM, 0
/// Nominal CPU is inactive, now Redundant CPU passes to active state
   2:SELECT CAB CPU                :UTC-03, CPU_R
  12:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_APSW.CMM, 0
  13:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 6, SEC
  14:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Redundant CPU is active
/// Redundant CPU is in active state and controls the CCS electronics configuration ON
   2:SEND COMMAND                  :CAN-02, C53, CCS_COMMANDING_ARM_DISARM_ARM.CMM, 0
   3:SEND COMMAND                  :CAN-02, C4B, CCS_OPEN_CLOSE_SEMIC_SW_OPEN.CMM, 0
// 4:SEND COMMAND                  :CAN-02, C4D, CCS_ENA_DIS_OUTPUT_DISABLE.CMM, 0                   // replaced by AL
   4:SEND COMMAND                  :CAN-02, C4D, CCS_ENA_DIS_OUTPUT_DIS.CMM, 0                       // replaced by AL
   5:SEND COMMAND                  :CAN-02, C4E, CCS_ON_OFF_CONVERTERS_ALL_OFF.CMM, 0
// 6:SEND COMMAND                  :CAN-02, C53, CCS_COMMANDING_ARM_DISARM_DISARM.CMM, 0             // replaced by AL
   6:SEND COMMAND                  :CAN-02, C53, CCS_COMMANDING_ARM_DISARM_DIS.CMM, 0                // replaced by AL
   8:SEND COMMAND                  :CAN-02, C7E, PS_INTERPOINT_DRIVER_ON_OFF_RED_OFF.CMM, 0
   9:SEND COMMAND                  :CAN-02, C05, CAB_GET_DIGITAL_STATUS_RED.CMM, 0
  10:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Redundant CPU passes to inactive state
   1:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_SUSW.CMM, 0
/// Redundant CPU is inactive, now Nominal CPU passes to active state
   2:SELECT CAB CPU                :UTC-03, CPU_N
  12:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_APSW.CMM, 0
  13:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 6, SEC
  14:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Nominal CPU is active
/// Sequence to Open the CL Diconnectors starts from CPU_N
/// Execute the following steps of the Ramp Down sequence from Step-11 to Step-14, detailed below
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_NOM_ARM_CLOSE_V21A.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_NOM.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_NOM_ARM_CLOSE_V21C.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_NOM.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_RED_ARM_CLOSE_V21B.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_RED.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_RED_ARM_CLOSE_V21D.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_RED.CMM, 0
/// CL Detection function is Disabled autonomuously
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// The wait state above is required by the CSP electronics
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// Power the CL TMP HTR OFF 
   1:SEND COMMAND                  :CAN-02, CE1, CSP_ARM_DISARM_HEATER_NOM_ARM_OFF_CL.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   4:SEND COMMAND                  :CAN-02, CE2, CSP_OPERATE_HEATER_NOM.CMM, 0
   5:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE1, CSP_ARM_DISARM_HEATER_RED_ARM_OFF_CL.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CE2, CSP_OPERATE_HEATER_RED.CMM, 0
   5:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// Close the CL valves DV56A-B
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_NOM_ARM_CLOSE_V56A.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_NOM.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_RED_ARM_CLOSE_V56B.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_RED.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// Close the Moog Valves DV22C & D from CSP_N and CSP_R
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_NOM_ARM_CLOSE_V22C.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_NOM_ARM_CLOSE_V22D.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_RED_ARM_CLOSE_V22C.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_RED.CMM, 0
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_RED_ARM_CLOSE_V22D.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_RED.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// Close the Moog Valves DV22A & B from CSP_N and CSP_R
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_NOM_ARM_CLOSE_V22A.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_NOM_ARM_CLOSE_V22B.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0 
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_NOM.CMM, 0 
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_RED_ARM_CLOSE_V22A.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_RED.CMM, 0
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_RED_ARM_CLOSE_V22B.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_RED.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// The CL Diconnectors have been opened
/// Sequence to open the CL Diconnectors is finished from CPU_N
/// Nominal CPU passes to inactive state
   1:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_SUSW.CMM, 0
/// Nominal CPU is inactive, now Redundant CPU passes to active state
   2:SELECT CAB CPU                :UTC-03, CPU_R
  12:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_APSW.CMM, 0
  13:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 6, SEC
  14:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Redundant CPU is active
/// Sequence to open the CL Diconnectors starts from CPU_R
/// Execute the following steps of the Ramp Down sequence from Step-11 to Step-14, detailed below
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_NOM_ARM_CLOSE_V21A.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_NOM.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_NOM_ARM_CLOSE_V21C.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_NOM.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_RED_ARM_CLOSE_V21B.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_RED.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_RED_ARM_CLOSE_V21D.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_RED.CMM, 0
/// CL Detection function is Disabled autonomuously
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// The wait state above is required by the CSP electronics
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// Power the CL TMP HTR OFF 
   1:SEND COMMAND                  :CAN-02, CE1, CSP_ARM_DISARM_HEATER_NOM_ARM_OFF_CL.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   4:SEND COMMAND                  :CAN-02, CE2, CSP_OPERATE_HEATER_NOM.CMM, 0
   5:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE1, CSP_ARM_DISARM_HEATER_RED_ARM_OFF_CL.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CE2, CSP_OPERATE_HEATER_RED.CMM, 0
   5:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// Close the CL valves DV56A-B
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_NOM_ARM_CLOSE_V56A.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_NOM.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CE4, CSP_ARM_DISARM_BIL_VALVE_RED_ARM_CLOSE_V56B.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CE7, CSP_OPERATE_BIL_VALVE_RED.CMM, 0
   4:SEND COMMAND                  :CAN-02, CC9, CSP_GET_VALVES_STATUS_RED.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// Close the Moog Valves DV22C & D from CSP_N and CSP_R
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_NOM_ARM_CLOSE_V22C.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_NOM_ARM_CLOSE_V22D.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_RED_ARM_CLOSE_V22C.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_RED.CMM, 0
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_RED_ARM_CLOSE_V22D.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_RED.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// Close the Moog Valves DV22A & B from CSP_N and CSP_R
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_NOM_ARM_CLOSE_V22A.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_NOM.CMM, 0
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_NOM_ARM_CLOSE_V22B.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_NOM.CMM, 0 
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_NOM.CMM, 0 
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_RED_ARM_CLOSE_V22A.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_RED.CMM, 0
   1:SEND COMMAND                  :CAN-02, CED, CSP_ARM_DISARM_MOOG_VALVE_RED_ARM_CLOSE_V22B.CMM, 0
   2:SEND COMMAND                  :CAN-02, CC5, CSP_GET_GENERAL_STATUS_RED.CMM, 0
   3:SEND COMMAND                  :CAN-02, CEE, CSP_OPERATE_MOOG_VALVE_RED.CMM, 0
  12:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 60, SEC
/// The CL Diconnectors have been opened
/// Sequence to open the CL Diconnectors is finished from CPU_R
/// Redundant CPU passes to inactive state
   1:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_SUSW.CMM, 0
/// Redundant CPU is inactive, now Nominal CPU passes to active state
   2:SELECT CAB CPU                :UTC-03, CPU_N
  12:SEND COMMAND                  :CAN-02, C14, CAB_JMDC_RESET_TO_APSW.CMM, 0
  13:WAIT N SECONDS/MILLI-SECONDS  :GEP-04, 6, SEC
  14:SEND COMMAND                  :CAN-02, C03, CAB_GET_ESSENTIAL_STATUS.CMM, 0
/// Nominal CPU is active
/// The 120V PS primary bus can be powered OFF
   7:REQUEST MESSAGE               :GEP-05, POWER-OFF 120V PS, NONE
/// RAMP UP SEQUENCE is finished
/// After ending the Ramp up sequence, the CAB should be in Cold Redundancy during Steady State
/// Turn the 28V_R primary bus OFF 


