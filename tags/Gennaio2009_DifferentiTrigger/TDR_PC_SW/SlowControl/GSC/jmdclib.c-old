// file jmdclib.c
//
// A.Lebedev, May-2008...
//

#include "jmdclib.h"

//~============================================================================
//
//                  PING COMMAND
//
//~============================================================================

void ping_JMDC(int n, int16 *dat, int *nn, int16 *datdat, int16 *err) {

  int32 RQ_typ = 0x01;
  int32 RQ_cnt = n;
  int32 RP_cnt;

//to_JMDC(R_W,  RQ_typ, RQ_cnt, RQ_dat, RP_siz, &RP_cnt, RP_dat, *RP_err);
  to_JMDC(READ, RQ_typ, RQ_cnt,    dat, 0xFFFF, &RP_cnt, datdat,     err);

  if (*err) return;
  
  if (nn) *nn = RP_cnt;
}


//~============================================================================
//
//                  Q-LIST COMMANDS
//
//~============================================================================

void write_JMDC_Q_list_status(int16 status, int16 *err) {

  int32 RQ_typ = 0x1F0700;
  int16 RQ_dat[1];
  int32 RQ_cnt = sizeof(RQ_dat) / 2;

  RQ_dat[0] = status;

//to_JMDC(R_W,   RQ_typ, RQ_cnt, RQ_dat,  RP_siz, &RP_cnt, RP_dat, &RP_err);
  to_JMDC(WRITE, RQ_typ, RQ_cnt, RQ_dat,       0,    NULL,   NULL,     err);
  
  if (*err) return;
}

//~----------------------------------------------------------------------------

void start_JMDC_Q_list(int16 *err) {

  write_JMDC_Q_list_status(1, err);
}

//~----------------------------------------------------------------------------

void stop_JMDC_Q_list(int16 *err) {

  write_JMDC_Q_list_status(0, err);
}

//~----------------------------------------------------------------------------

void check_JMDC_Q_list_status(int16 *status, int16 *err) {

  int32 RQ_typ = 0x1F0700;
  int16 RP_dat[1];
  int32 RP_siz = sizeof(RP_dat) / 2;
  int32 RP_cnt;

//to_JMDC(R_W,  RQ_typ, RQ_cnt, RQ_dat,  RP_siz, &RP_cnt, RP_dat, &RP_err);
  to_JMDC(READ, RQ_typ,      0,   NULL,  RP_siz, &RP_cnt, RP_dat,     err);
  
  if (*err) return;

  if (RP_cnt != 1) {
    *err = 0x0100;
    return;
  }

  if (status) *status = RP_dat[0];
}

//~----------------------------------------------------------------------------

void read_JMDC_Q_list(int *n, int16 *dat, int16 *err) {

  int i;
  int32 RQ_typ = 0x1F0701;
  int16 RP_dat[10000];
  int32 RP_siz = sizeof(RP_dat) / 2;
  int32 RP_cnt;

//to_JMDC(W_R,  RQ_typ, RQ_cnt, RQ_dat,  RP_siz, &RP_cnt, RP_dat, &RP_err);
  to_JMDC(READ, RQ_typ,      0,   NULL,  RP_siz, &RP_cnt, RP_dat,     err);
  
  if (*err) return;
  
  if (n) *n = RP_cnt;

  if (dat) for (i=0; i<RP_cnt; i++) dat[i] = RP_dat[i];
}

//~============================================================================
//
//                  MAIN INTERFACE FUNCTION TO JMDC
//
//~============================================================================

void to_JMDC(int R_W,
             int32 RQ_typ, int32  RQ_cnt, int16 *RQ_dat,
             int32 RP_siz, int32 *RP_cnt, int16 *RP_dat, int16 *RP_err) {

  static AMSBlock Request, *pRequest = &Request;
  static AMSBlock Reply,   *pReply   = &Reply;

  pRequest->BlockType    = R_W == WRITE ? 1 : 0;
  pRequest->NodeAddress  = NODE_ADR;
  pRequest->DataType     = RQ_typ;
  pRequest->DataCount    = RQ_cnt * 2;
  pRequest->Data.p8      = NULL;
  pRequest->Data.p16     = RQ_dat;
  pRequest->Source       = 0x0000;

  pReply->Error       = 0x0000;
  pReply->BufferSize  = RP_siz * 2;
  pReply->Data.p8     = NULL;
  pReply->Data.p16    = RP_dat;
  pReply->BlockType   = 0x0002 | (pRequest->BlockType & 0x0001);
  pReply->NodeAddress = pRequest->NodeAddress;
  pReply->DataType    = pRequest->DataType;
  pReply->DataCount   = 0;
  pReply->Source      = pRequest->Source;

  if (P > 1) print_AMS_data_block("REQUEST:", pRequest);
  
  if (use_TCP) {
    open_TCP_connection(CS_address, CS_port, &pReply->Error);
    if (!pReply->Error) TCP_SND_RCV(pRequest, pReply);
    close_TCP_connection();
  }

  else if (use_EAS) {
//  printf("PAD: Sending command...\n");
    eAssRequestWithReply(pRequest, pReply);
    if (RP_dat) memcpy(RP_dat, pReply->Contents, pReply->DataCount);
  }

  if (RP_cnt) *RP_cnt = pReply->DataCount / 2;
  if (RP_err) *RP_err = pReply->Error;
  if (P > 1) print_AMS_data_block("REPLY:  ", pReply);
}

//~============================================================================
