//
// File generated by /cern/root/bin/rootcint at Tue Jul 28 19:06:13 2009

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "rootElibdict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Calib Calib;
      #else
      class Calib  {
         public:
         //friend XX;
         int RunNum; //
         char caldir[300]; //
         ::calib cals[24]; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void Trace_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_Trace(void *p = 0);
   static void *newArray_Trace(Long_t size, void *p);
   static void delete_Trace(void *p);
   static void deleteArray_Trace(void *p);
   static void destruct_Trace(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Trace*)
   {
      ::Trace *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Trace >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Trace", ::Trace::Class_Version(), "../include/Trace.hh", 7,
                  typeid(::Trace), DefineBehavior(ptr, ptr),
                  &::Trace::Dictionary, isa_proxy, 4,
                  sizeof(::Trace) );
      instance.SetNew(&new_Trace);
      instance.SetNewArray(&newArray_Trace);
      instance.SetDelete(&delete_Trace);
      instance.SetDeleteArray(&deleteArray_Trace);
      instance.SetDestructor(&destruct_Trace);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Trace*)
   {
      return GenerateInitInstanceLocal((::Trace*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Trace*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Align_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_Align(void *p);
   static void deleteArray_Align(void *p);
   static void destruct_Align(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Align*)
   {
      ::Align *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Align >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Align", ::Align::Class_Version(), "../include/Align.hh", 16,
                  typeid(::Align), DefineBehavior(ptr, ptr),
                  &::Align::Dictionary, isa_proxy, 4,
                  sizeof(::Align) );
      instance.SetDelete(&delete_Align);
      instance.SetDeleteArray(&deleteArray_Align);
      instance.SetDestructor(&destruct_Align);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Align*)
   {
      return GenerateInitInstanceLocal((::Align*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Align*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Cluster_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_Cluster(void *p = 0);
   static void *newArray_Cluster(Long_t size, void *p);
   static void delete_Cluster(void *p);
   static void deleteArray_Cluster(void *p);
   static void destruct_Cluster(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Cluster*)
   {
      ::Cluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Cluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Cluster", ::Cluster::Class_Version(), "../include/Cluster.hh", 12,
                  typeid(::Cluster), DefineBehavior(ptr, ptr),
                  &::Cluster::Dictionary, isa_proxy, 4,
                  sizeof(::Cluster) );
      instance.SetNew(&new_Cluster);
      instance.SetNewArray(&newArray_Cluster);
      instance.SetDelete(&delete_Cluster);
      instance.SetDeleteArray(&deleteArray_Cluster);
      instance.SetDestructor(&destruct_Cluster);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Cluster*)
   {
      return GenerateInitInstanceLocal((::Cluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Cluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void RHClass_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_RHClass(void *p = 0);
   static void *newArray_RHClass(Long_t size, void *p);
   static void delete_RHClass(void *p);
   static void deleteArray_RHClass(void *p);
   static void destruct_RHClass(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RHClass*)
   {
      ::RHClass *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::RHClass >(0);
      static ::ROOT::TGenericClassInfo 
         instance("RHClass", ::RHClass::Class_Version(), "../include/RHClass.hh", 11,
                  typeid(::RHClass), DefineBehavior(ptr, ptr),
                  &::RHClass::Dictionary, isa_proxy, 4,
                  sizeof(::RHClass) );
      instance.SetNew(&new_RHClass);
      instance.SetNewArray(&newArray_RHClass);
      instance.SetDelete(&delete_RHClass);
      instance.SetDeleteArray(&deleteArray_RHClass);
      instance.SetDestructor(&destruct_RHClass);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RHClass*)
   {
      return GenerateInitInstanceLocal((::RHClass*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RHClass*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Event_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_Event(void *p = 0);
   static void *newArray_Event(Long_t size, void *p);
   static void delete_Event(void *p);
   static void deleteArray_Event(void *p);
   static void destruct_Event(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Event*)
   {
      ::Event *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Event >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Event", ::Event::Class_Version(), "../include/Event.hh", 11,
                  typeid(::Event), DefineBehavior(ptr, ptr),
                  &::Event::Dictionary, isa_proxy, 4,
                  sizeof(::Event) );
      instance.SetNew(&new_Event);
      instance.SetNewArray(&newArray_Event);
      instance.SetDelete(&delete_Event);
      instance.SetDeleteArray(&deleteArray_Event);
      instance.SetDestructor(&destruct_Event);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Event*)
   {
      return GenerateInitInstanceLocal((::Event*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Event*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Calib_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void Calib_Dictionary();
   static void delete_Calib(void *p);
   static void deleteArray_Calib(void *p);
   static void destruct_Calib(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Calib*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Calib) == sizeof(::ROOT::Shadow::Calib));
      ::Calib *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Calib),0);
      static ::ROOT::TGenericClassInfo 
         instance("Calib", "../include/Calib.hh", 17,
                  typeid(::Calib), DefineBehavior(ptr, ptr),
                  (void*)&Calib_ShowMembers, &Calib_Dictionary, isa_proxy, 4,
                  sizeof(::Calib) );
      instance.SetDelete(&delete_Calib);
      instance.SetDeleteArray(&deleteArray_Calib);
      instance.SetDestructor(&destruct_Calib);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Calib*)
   {
      return GenerateInitInstanceLocal((::Calib*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Calib*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Calib_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Calib*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void DHF_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_DHF(void *p);
   static void deleteArray_DHF(void *p);
   static void destruct_DHF(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::DHF*)
   {
      ::DHF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DHF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DHF", ::DHF::Class_Version(), "../include/DHF.hh", 35,
                  typeid(::DHF), DefineBehavior(ptr, ptr),
                  &::DHF::Dictionary, isa_proxy, 4,
                  sizeof(::DHF) );
      instance.SetDelete(&delete_DHF);
      instance.SetDeleteArray(&deleteArray_DHF);
      instance.SetDestructor(&destruct_DHF);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::DHF*)
   {
      return GenerateInitInstanceLocal((::DHF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DHF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *Trace::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Trace::Class_Name()
{
   return "Trace";
}

//______________________________________________________________________________
const char *Trace::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Trace*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Trace::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Trace*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Trace::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Trace*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Trace::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Trace*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Align::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Align::Class_Name()
{
   return "Align";
}

//______________________________________________________________________________
const char *Align::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Align*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Align::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Align*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Align::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Align*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Align::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Align*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Cluster::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Cluster::Class_Name()
{
   return "Cluster";
}

//______________________________________________________________________________
const char *Cluster::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Cluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Cluster::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Cluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Cluster::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Cluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Cluster::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Cluster*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *RHClass::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *RHClass::Class_Name()
{
   return "RHClass";
}

//______________________________________________________________________________
const char *RHClass::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::RHClass*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RHClass::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::RHClass*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RHClass::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::RHClass*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RHClass::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::RHClass*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Event::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Event::Class_Name()
{
   return "Event";
}

//______________________________________________________________________________
const char *Event::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Event::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Event::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Event::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *DHF::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *DHF::Class_Name()
{
   return "DHF";
}

//______________________________________________________________________________
const char *DHF::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DHF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DHF::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DHF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DHF::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DHF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DHF::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DHF*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void Cluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class Cluster.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Cluster::Class(),this);
   } else {
      R__b.WriteClassBuffer(Cluster::Class(),this);
   }
}

//______________________________________________________________________________
void Cluster::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Cluster.
      TClass *R__cl = ::Cluster::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "address", &address);
      R__insp.Inspect(R__cl, R__parent, "piste_eta", &piste_eta);
      R__insp.Inspect(R__cl, R__parent, "piste_eta3", &piste_eta3);
      R__insp.Inspect(R__cl, R__parent, "length", &length);
      R__insp.Inspect(R__cl, R__parent, "npiste", &npiste);
      R__insp.Inspect(R__cl, R__parent, "Signal[50]", Signal);
      R__insp.Inspect(R__cl, R__parent, "Noise[50]", Noise);
      R__insp.Inspect(R__cl, R__parent, "Status[50]", Status);
      R__insp.Inspect(R__cl, R__parent, "ladder", &ladder);
      R__insp.Inspect(R__cl, R__parent, "side", &side);
      R__insp.Inspect(R__cl, R__parent, "bad", &bad);
      R__insp.Inspect(R__cl, R__parent, "golden", &golden);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Cluster(void *p) {
      return  p ? new(p) ::Cluster : new ::Cluster;
   }
   static void *newArray_Cluster(Long_t nElements, void *p) {
      return p ? new(p) ::Cluster[nElements] : new ::Cluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_Cluster(void *p) {
      delete ((::Cluster*)p);
   }
   static void deleteArray_Cluster(void *p) {
      delete [] ((::Cluster*)p);
   }
   static void destruct_Cluster(void *p) {
      typedef ::Cluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Cluster

//______________________________________________________________________________
void RHClass::Streamer(TBuffer &R__b)
{
   // Stream an object of class RHClass.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(RHClass::Class(),this);
   } else {
      R__b.WriteClassBuffer(RHClass::Class(),this);
   }
}

//______________________________________________________________________________
void RHClass::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class RHClass.
      TClass *R__cl = ::RHClass::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "Run", &Run);
      R__insp.Inspect(R__cl, R__parent, "date[30]", date);
      R__insp.Inspect(R__cl, R__parent, "nJinf", &nJinf);
      R__insp.Inspect(R__cl, R__parent, "JinfMap[2]", JinfMap);
      R__insp.Inspect(R__cl, R__parent, "ntdrRaw", &ntdrRaw);
      R__insp.Inspect(R__cl, R__parent, "tdrRawMap[24]", tdrRawMap);
      R__insp.Inspect(R__cl, R__parent, "ntdrCmp", &ntdrCmp);
      R__insp.Inspect(R__cl, R__parent, "tdrCmpMap[24]", tdrCmpMap);
      R__insp.Inspect(R__cl, R__parent, "CNMean[24][16]", CNMean);
      R__insp.Inspect(R__cl, R__parent, "CNSigma[24][16]", CNSigma);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_RHClass(void *p) {
      return  p ? new(p) ::RHClass : new ::RHClass;
   }
   static void *newArray_RHClass(Long_t nElements, void *p) {
      return p ? new(p) ::RHClass[nElements] : new ::RHClass[nElements];
   }
   // Wrapper around operator delete
   static void delete_RHClass(void *p) {
      delete ((::RHClass*)p);
   }
   static void deleteArray_RHClass(void *p) {
      delete [] ((::RHClass*)p);
   }
   static void destruct_RHClass(void *p) {
      typedef ::RHClass current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::RHClass

//______________________________________________________________________________
void Event::Streamer(TBuffer &R__b)
{
   // Stream an object of class Event.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Event::Class(),this);
   } else {
      R__b.WriteClassBuffer(Event::Class(),this);
   }
}

//______________________________________________________________________________
void Event::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Event.
      TClass *R__cl = ::Event::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "Evtnum", &Evtnum);
      R__insp.Inspect(R__cl, R__parent, "JINJStatus", &JINJStatus);
      R__insp.Inspect(R__cl, R__parent, "JINFStatus[2]", JINFStatus);
      R__insp.Inspect(R__cl, R__parent, "TDRStatus[24]", TDRStatus);
      R__insp.Inspect(R__cl, R__parent, "CNoise[24][16]", CNoise);
      R__insp.Inspect(R__cl, R__parent, "NClus[24][2]", NClus);
      R__insp.Inspect(R__cl, R__parent, "NClusTot", &NClusTot);
      R__insp.Inspect(R__cl, R__parent, "notgood", &notgood);
      R__insp.Inspect(R__cl, R__parent, "*Cls", &Cls);
      R__insp.Inspect(R__cl, R__parent, "NTraceTot", &NTraceTot);
      R__insp.Inspect(R__cl, R__parent, "TraType", &TraType);
      R__insp.Inspect(R__cl, R__parent, "*Tra", &Tra);
      R__insp.Inspect(R__cl, R__parent, "rawtdrnum", &rawtdrnum);
      R__insp.Inspect(R__cl, R__parent, "Signal[8][1024]", Signal);
      R__insp.Inspect(R__cl, R__parent, "ReadTDR[24]", ReadTDR);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Event(void *p) {
      return  p ? new(p) ::Event : new ::Event;
   }
   static void *newArray_Event(Long_t nElements, void *p) {
      return p ? new(p) ::Event[nElements] : new ::Event[nElements];
   }
   // Wrapper around operator delete
   static void delete_Event(void *p) {
      delete ((::Event*)p);
   }
   static void deleteArray_Event(void *p) {
      delete [] ((::Event*)p);
   }
   static void destruct_Event(void *p) {
      typedef ::Event current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Event

//______________________________________________________________________________
void DHF::Streamer(TBuffer &R__b)
{
   // Stream an object of class DHF.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(DHF::Class(),this);
   } else {
      R__b.WriteClassBuffer(DHF::Class(),this);
   }
}

//______________________________________________________________________________
void DHF::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class DHF.
      TClass *R__cl = ::DHF::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "NTdr", &NTdr);
      R__insp.Inspect(R__cl, R__parent, "TDRNum[24]", TDRNum);
      R__insp.Inspect(R__cl, R__parent, "*fDir", &fDir);
      R__insp.Inspect(R__cl, R__parent, "*fHlist", &fHlist);
      R__insp.Inspect(R__cl, R__parent, "*fDHlist0", &fDHlist0);
      R__insp.Inspect(R__cl, R__parent, "*fDHlist1", &fDHlist1);
      R__insp.Inspect(R__cl, R__parent, "*fDHlist2", &fDHlist2);
      R__insp.Inspect(R__cl, R__parent, "*fDHlist3", &fDHlist3);
      R__insp.Inspect(R__cl, R__parent, "*fDHlist4", &fDHlist4);
      R__insp.Inspect(R__cl, R__parent, "*fDHlist5", &fDHlist5);
      R__insp.Inspect(R__cl, R__parent, "*fDHlistTop", &fDHlistTop);
      R__insp.Inspect(R__cl, R__parent, "*fhist", &fhist);
      R__insp.Inspect(R__cl, R__parent, "*Ev", &Ev);
      R__insp.Inspect(R__cl, R__parent, "runno", &runno);
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_DHF(void *p) {
      delete ((::DHF*)p);
   }
   static void deleteArray_DHF(void *p) {
      delete [] ((::DHF*)p);
   }
   static void destruct_DHF(void *p) {
      typedef ::DHF current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::DHF

//______________________________________________________________________________
void Align::Streamer(TBuffer &R__b)
{
   // Stream an object of class Align.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Align::Class(),this);
   } else {
      R__b.WriteClassBuffer(Align::Class(),this);
   }
}

//______________________________________________________________________________
void Align::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Align.
      TClass *R__cl = ::Align::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fitxz", &fitxz);
      R__insp.Inspect(R__cl, R__parent, "*fityz", &fityz);
      R__insp.Inspect(R__cl, R__parent, "*xp", &xp);
      R__insp.Inspect(R__cl, R__parent, "*yp", &yp);
      R__insp.Inspect(R__cl, R__parent, "*zp", &zp);
      R__insp.Inspect(R__cl, R__parent, "*e", &e);
      R__insp.Inspect(R__cl, R__parent, "npts", &npts);
      R__insp.Inspect(R__cl, R__parent, "ntrace", &ntrace);
      R__insp.Inspect(R__cl, R__parent, "ntrace_eff[2][6]", ntrace_eff);
      R__insp.Inspect(R__cl, R__parent, "nfit1", &nfit1);
      R__insp.Inspect(R__cl, R__parent, "nfit2", &nfit2);
      R__insp.Inspect(R__cl, R__parent, "nfit2_2", &nfit2_2);
      R__insp.Inspect(R__cl, R__parent, "nfit3", &nfit3);
      R__insp.Inspect(R__cl, R__parent, "nfit4", &nfit4);
      R__insp.Inspect(R__cl, R__parent, "nfit5", &nfit5);
      R__insp.Inspect(R__cl, R__parent, "nfit6", &nfit6);
      R__insp.Inspect(R__cl, R__parent, "nfit7", &nfit7);
      R__insp.Inspect(R__cl, R__parent, "nfit8", &nfit8);
      R__insp.Inspect(R__cl, R__parent, "xval1[5000]", xval1);
      R__insp.Inspect(R__cl, R__parent, "yval1[5000]", yval1);
      R__insp.Inspect(R__cl, R__parent, "xval2[5000]", xval2);
      R__insp.Inspect(R__cl, R__parent, "yval2[5000]", yval2);
      R__insp.Inspect(R__cl, R__parent, "xval2_2[5000]", xval2_2);
      R__insp.Inspect(R__cl, R__parent, "yval2_2[5000]", yval2_2);
      R__insp.Inspect(R__cl, R__parent, "xval3[5000]", xval3);
      R__insp.Inspect(R__cl, R__parent, "yval3[5000]", yval3);
      R__insp.Inspect(R__cl, R__parent, "xval4[5000]", xval4);
      R__insp.Inspect(R__cl, R__parent, "yval4[5000]", yval4);
      R__insp.Inspect(R__cl, R__parent, "xval5[5000]", xval5);
      R__insp.Inspect(R__cl, R__parent, "yval5[5000]", yval5);
      R__insp.Inspect(R__cl, R__parent, "xval6[5000]", xval6);
      R__insp.Inspect(R__cl, R__parent, "yval6[5000]", yval6);
      R__insp.Inspect(R__cl, R__parent, "xval7[5000]", xval7);
      R__insp.Inspect(R__cl, R__parent, "yval7[5000]", yval7);
      R__insp.Inspect(R__cl, R__parent, "xval8[5000]", xval8);
      R__insp.Inspect(R__cl, R__parent, "yval8[5000]", yval8);
      R__insp.Inspect(R__cl, R__parent, "depz", &depz);
      R__insp.Inspect(R__cl, R__parent, "resx[6]", resx);
      R__insp.Inspect(R__cl, R__parent, "resex[6]", resex);
      R__insp.Inspect(R__cl, R__parent, "resy[6]", resy);
      R__insp.Inspect(R__cl, R__parent, "resey[6]", resey);
      R__insp.Inspect(R__cl, R__parent, "reseffx[6]", reseffx);
      R__insp.Inspect(R__cl, R__parent, "reseffy[6]", reseffy);
      R__insp.Inspect(R__cl, R__parent, "resxech[4]", resxech);
      R__insp.Inspect(R__cl, R__parent, "resexech[4]", resexech);
      R__insp.Inspect(R__cl, R__parent, "resyech[4]", resyech);
      R__insp.Inspect(R__cl, R__parent, "reseyech[4]", reseyech);
      R__insp.Inspect(R__cl, R__parent, "ressx[4]", ressx);
      R__insp.Inspect(R__cl, R__parent, "ressy[4]", ressy);
      R__insp.Inspect(R__cl, R__parent, "resx_pos0[2]", resx_pos0);
      R__insp.Inspect(R__cl, R__parent, "resy_pos0[2]", resy_pos0);
      R__insp.Inspect(R__cl, R__parent, "resx_pos4[2]", resx_pos4);
      R__insp.Inspect(R__cl, R__parent, "resy_pos4[2]", resy_pos4);
      R__insp.Inspect(R__cl, R__parent, "ppiste_n[6]", ppiste_n);
      R__insp.Inspect(R__cl, R__parent, "deux_plaq_n[6]", deux_plaq_n);
      R__insp.Inspect(R__cl, R__parent, "xdx[6]", xdx);
      R__insp.Inspect(R__cl, R__parent, "ydy[6]", ydy);
      R__insp.Inspect(R__cl, R__parent, "xpospred[6]", xpospred);
      R__insp.Inspect(R__cl, R__parent, "ypospred[6]", ypospred);
      R__insp.Inspect(R__cl, R__parent, "ztdr[6]", ztdr);
      R__insp.Inspect(R__cl, R__parent, "ref1", &ref1);
      R__insp.Inspect(R__cl, R__parent, "ref2", &ref2);
      R__insp.Inspect(R__cl, R__parent, "ind3", &ind3);
      R__insp.Inspect(R__cl, R__parent, "ind4", &ind4);
      R__insp.Inspect(R__cl, R__parent, "indp1", &indp1);
      R__insp.Inspect(R__cl, R__parent, "indp2", &indp2);
      R__insp.Inspect(R__cl, R__parent, "mauvais[6][1024]", mauvais);
      R__insp.Inspect(R__cl, R__parent, "align", &align);
      R__insp.Inspect(R__cl, R__parent, "algpar[15][6]", algpar);
      R__insp.Inspect(R__cl, R__parent, "algpar_2[15][6]", algpar_2);
      R__insp.Inspect(R__cl, R__parent, "algpar_fich[8][11][6]", algpar_fich);
      R__insp.Inspect(R__cl, R__parent, "delta_y_ind4", &delta_y_ind4);
      R__insp.Inspect(R__cl, R__parent, "plaq_dim[2]", plaq_dim);
      R__insp.Inspect(R__cl, R__parent, "plaq_dim_active[2]", plaq_dim_active);
      R__insp.Inspect(R__cl, R__parent, "ecart", &ecart);
      R__insp.Inspect(R__cl, R__parent, "amaspar[2][6]", amaspar);
      R__insp.Inspect(R__cl, R__parent, "*feta_p[6]", &feta_p);
      R__insp.Inspect(R__cl, R__parent, "*feta_n[6]", &feta_n);
      R__insp.Inspect(R__cl, R__parent, "*feta3_p[6]", &feta3_p);
      R__insp.Inspect(R__cl, R__parent, "*feta3_n[6]", &feta3_n);
      R__insp.Inspect(R__cl, R__parent, "bord_eta3_p[6]", bord_eta3_p);
      R__insp.Inspect(R__cl, R__parent, "bord_eta3_n[6]", bord_eta3_n);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_Align(void *p) {
      delete ((::Align*)p);
   }
   static void deleteArray_Align(void *p) {
      delete [] ((::Align*)p);
   }
   static void destruct_Align(void *p) {
      typedef ::Align current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Align

//______________________________________________________________________________
void Trace::Streamer(TBuffer &R__b)
{
   // Stream an object of class Trace.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Trace::Class(),this);
   } else {
      R__b.WriteClassBuffer(Trace::Class(),this);
   }
}

//______________________________________________________________________________
void Trace::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Trace.
      TClass *R__cl = ::Trace::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "x[6]", x);
      R__insp.Inspect(R__cl, R__parent, "y[6]", y);
      R__insp.Inspect(R__cl, R__parent, "z[6]", z);
      R__insp.Inspect(R__cl, R__parent, "xsa[6]", xsa);
      R__insp.Inspect(R__cl, R__parent, "ysa[6]", ysa);
      R__insp.Inspect(R__cl, R__parent, "xp[6]", xp);
      R__insp.Inspect(R__cl, R__parent, "yp[6]", yp);
      R__insp.Inspect(R__cl, R__parent, "amas_entree[2][6]", amas_entree);
      R__insp.Inspect(R__cl, R__parent, "amas_signal[2][6]", amas_signal);
      R__insp.Inspect(R__cl, R__parent, "dxdz", &dxdz);
      R__insp.Inspect(R__cl, R__parent, "dydz", &dydz);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Trace(void *p) {
      return  p ? new(p) ::Trace : new ::Trace;
   }
   static void *newArray_Trace(Long_t nElements, void *p) {
      return p ? new(p) ::Trace[nElements] : new ::Trace[nElements];
   }
   // Wrapper around operator delete
   static void delete_Trace(void *p) {
      delete ((::Trace*)p);
   }
   static void deleteArray_Trace(void *p) {
      delete [] ((::Trace*)p);
   }
   static void destruct_Trace(void *p) {
      typedef ::Trace current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Trace

//______________________________________________________________________________
namespace ROOT {
   void Calib_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent)
   {
      // Inspect the data members of an object of class Calib.
      typedef ::ROOT::Shadow::Calib ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Calib*)0x0)->GetClass();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "RunNum", &sobj->RunNum);
      R__insp.Inspect(R__cl, R__parent, "caldir[300]", sobj->caldir);
      R__insp.Inspect(R__cl, R__parent, "cals[24]", sobj->cals);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_Calib(void *p) {
      delete ((::Calib*)p);
   }
   static void deleteArray_Calib(void *p) {
      delete [] ((::Calib*)p);
   }
   static void destruct_Calib(void *p) {
      typedef ::Calib current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Calib

/********************************************************
* ../source/rootElibdict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && (__GNUC__ > 3) && (__GNUC_MINOR__ > 1)
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablerootElibdict();

extern "C" void G__set_cpp_environmentrootElibdict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("../include/DHF.hh");
  G__add_compiledheader("../include/Cluster.hh");
  G__add_compiledheader("../include/Event.hh");
  G__add_compiledheader("../include/Align.hh");
  G__add_compiledheader("../include/Trace.hh");
  G__add_compiledheader("../include/Calib.hh");
  G__cpp_reset_tagtablerootElibdict();
}
#include <new>
extern "C" int G__cpp_dllrevrootElibdict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Trace */
static int G__rootElibdict_329_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Trace* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Trace[n];
     } else {
       p = new((void*) gvp) Trace[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Trace;
     } else {
       p = new((void*) gvp) Trace;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_Trace));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_329_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Trace::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_329_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Trace::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_329_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Trace::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_329_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Trace::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_329_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Trace*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_329_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Trace::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_329_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Trace::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_329_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Trace::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_329_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Trace::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__rootElibdict_329_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Trace* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Trace(*(Trace*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_Trace));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Trace G__TTrace;
static int G__rootElibdict_329_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Trace*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Trace*) (soff+(sizeof(Trace)*i)))->~G__TTrace();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Trace*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Trace*) (soff))->~G__TTrace();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rootElibdict_329_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Trace* dest = (Trace*) G__getstructoffset();
   *dest = *(Trace*) libp->para[0].ref;
   const Trace& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Align */
static int G__rootElibdict_330_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Align* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Align((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) Align((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_Align));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Align*) G__getstructoffset())->MaJXYpos(
(int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]), (double) G__double(libp->para[9])
, (double) G__double(libp->para[10]), (double) G__double(libp->para[11])
, (double) G__double(libp->para[12]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Align*) G__getstructoffset())->MaJRotRef1((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Align*) G__getstructoffset())->MaJRotxxyy(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]), (double) G__double(libp->para[9])
, (double) G__double(libp->para[10]), (double) G__double(libp->para[11])
, (double) G__double(libp->para[12]), (double) G__double(libp->para[13])
, (double) G__double(libp->para[14]), (double) G__double(libp->para[15])
, (double) G__double(libp->para[16]), (double) G__double(libp->para[17]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Align*) G__getstructoffset())->MaJRotxyyx(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]), (double) G__double(libp->para[9])
, (double) G__double(libp->para[10]), (double) G__double(libp->para[11])
, (double) G__double(libp->para[12]), (double) G__double(libp->para[13])
, (double) G__double(libp->para[14]), (double) G__double(libp->para[15]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Align*) G__getstructoffset())->deux_plaq());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Align*) G__getstructoffset())->coord((Trace*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Align*) G__getstructoffset())->apos((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Trace*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Align*) G__getstructoffset())->apos_dxy_dyx((int) G__int(libp->para[0]), (Trace*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Align*) G__getstructoffset())->ipred((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Trace*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Align*) G__getstructoffset())->apos((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (Trace*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Align*) G__getstructoffset())->EcrireAlgPar();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Align*) G__getstructoffset())->LireAlgPar();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Align*) G__getstructoffset())->LireFichAlgPar((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Align*) G__getstructoffset())->LireFichAmasPar((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Align*) G__getstructoffset())->LireFonctionEta((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Align*) G__getstructoffset())->LireFonctionEta3((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Align*) G__getstructoffset())->ligne_projx((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (Trace*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Align*) G__getstructoffset())->ligne_projy((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (Trace*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Align*) G__getstructoffset())->ligne_projxz((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (Trace*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Align*) G__getstructoffset())->ligne_projyz((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (Trace*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Align*) G__getstructoffset())->div_dxdz((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Trace*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Align*) G__getstructoffset())->div_dydz((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Trace*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Align*) G__getstructoffset())->div_dxdz_lin((Trace*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Align*) G__getstructoffset())->div_dxdz_lin_ref((Trace*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Align*) G__getstructoffset())->div_dxdz_lin_pos123((Trace*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Align*) G__getstructoffset())->div_dxdz_lin_proj_pos0((Trace*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Align*) G__getstructoffset())->div_dxdz_lin_proj_pos4((Trace*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Align*) G__getstructoffset())->div_dxdz_lin_eff((Trace*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Align*) G__getstructoffset())->div_dydz_lin((Trace*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Align*) G__getstructoffset())->div_dydz_lin_ref((Trace*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Align*) G__getstructoffset())->div_dydz_lin_pos123((Trace*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Align*) G__getstructoffset())->div_dydz_lin_proj_pos0((Trace*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Align*) G__getstructoffset())->div_dydz_lin_proj_pos4((Trace*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Align*) G__getstructoffset())->div_dydz_lin_eff((Trace*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Align*) G__getstructoffset())->sind((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Align::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Align::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Align::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Align::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Align*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Align::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Align::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Align::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_330_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Align::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__rootElibdict_330_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Align* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Align(*(Align*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_Align));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Align G__TAlign;
static int G__rootElibdict_330_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Align*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Align*) (soff+(sizeof(Align)*i)))->~G__TAlign();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Align*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Align*) (soff))->~G__TAlign();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rootElibdict_330_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Align* dest = (Align*) G__getstructoffset();
   *dest = *(Align*) libp->para[0].ref;
   const Align& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Cluster */
static int G__rootElibdict_331_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Cluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Cluster[n];
     } else {
       p = new((void*) gvp) Cluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Cluster;
     } else {
       p = new((void*) gvp) Cluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_Cluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Cluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Cluster(*(Cluster*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Cluster(*(Cluster*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_Cluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      ((Cluster*) G__getstructoffset())->Build(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (float*) G__int(libp->para[5])
, (int*) G__int(libp->para[6]), (int) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((Cluster*) G__getstructoffset())->Build(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (float*) G__int(libp->para[5])
, (int*) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Cluster*) G__getstructoffset())->GetSeed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Cluster*) G__getstructoffset())->GetSeedStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Cluster*) G__getstructoffset())->GetSeedAdd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetSeedVal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetSeedSN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetTotNoise((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Cluster*) G__getstructoffset())->GetLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetCoG());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetCoGN((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetPositionEtaP((Align*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetPositionEtaN((Align*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetPositionEta3N((Align*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetTotSig((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetTotSN((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetEtaTrue());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetEta3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetEta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetEtaRaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Cluster*) G__getstructoffset())->GoldRegion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((Cluster*) G__getstructoffset())->GetLargeur((float) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((Cluster*) G__getstructoffset())->GetLargeur());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Cluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Cluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Cluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Cluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_331_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Cluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Cluster G__TCluster;
static int G__rootElibdict_331_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Cluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Cluster*) (soff+(sizeof(Cluster)*i)))->~G__TCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Cluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Cluster*) (soff))->~G__TCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rootElibdict_331_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Cluster* dest = (Cluster*) G__getstructoffset();
   *dest = *(Cluster*) libp->para[0].ref;
   const Cluster& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RHClass */
static int G__rootElibdict_332_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RHClass* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RHClass[n];
     } else {
       p = new((void*) gvp) RHClass[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RHClass;
     } else {
       p = new((void*) gvp) RHClass;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_RHClass));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_332_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RHClass*) G__getstructoffset())->FindPos((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_332_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RHClass*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_332_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) RHClass::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_332_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RHClass::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_332_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) RHClass::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_332_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RHClass::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_332_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RHClass*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_332_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RHClass::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_332_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RHClass::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_332_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RHClass::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_332_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RHClass::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__rootElibdict_332_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RHClass* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RHClass(*(RHClass*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_RHClass));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RHClass G__TRHClass;
static int G__rootElibdict_332_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RHClass*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RHClass*) (soff+(sizeof(RHClass)*i)))->~G__TRHClass();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RHClass*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RHClass*) (soff))->~G__TRHClass();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rootElibdict_332_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RHClass* dest = (RHClass*) G__getstructoffset();
   *dest = *(RHClass*) libp->para[0].ref;
   const RHClass& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Event */
static int G__rootElibdict_333_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Event* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Event[n];
     } else {
       p = new((void*) gvp) Event[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Event;
     } else {
       p = new((void*) gvp) Event;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_Event));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_333_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_333_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Event*) G__getstructoffset())->AddCluster((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_333_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Event*) G__getstructoffset())->GetCluster((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_333_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->trace((RHClass*) G__int(libp->para[0]), (Align*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_333_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->NGoldenClus((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_333_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Event::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_333_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Event::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_333_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Event::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_333_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Event::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_333_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_333_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Event::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_333_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Event::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_333_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Event::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_333_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Event::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__rootElibdict_333_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Event* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Event(*(Event*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_Event));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Event G__TEvent;
static int G__rootElibdict_333_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Event*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Event*) (soff+(sizeof(Event)*i)))->~G__TEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Event*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Event*) (soff))->~G__TEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rootElibdict_333_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Event* dest = (Event*) G__getstructoffset();
   *dest = *(Event*) libp->para[0].ref;
   const Event& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Calib */
static int G__rootElibdict_335_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Calib* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Calib((int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) Calib((int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_Calib));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_335_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Calib*) G__getstructoffset())->Calpos((int) G__int(libp->para[0]), (RHClass*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_335_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Calib*) G__getstructoffset())->RepererCalibs((RHClass*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_335_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Calib*) G__getstructoffset())->LireCalib((FILE*) G__int(libp->para[0]), (calib*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_335_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Calib*) G__getstructoffset())->ret_piedestal((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_335_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Calib*) G__getstructoffset())->ret_sigma((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_335_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Calib*) G__getstructoffset())->ret_statut((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__rootElibdict_335_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Calib* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Calib(*(Calib*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_Calib));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Calib G__TCalib;
static int G__rootElibdict_335_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Calib*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Calib*) (soff+(sizeof(Calib)*i)))->~G__TCalib();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Calib*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Calib*) (soff))->~G__TCalib();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rootElibdict_335_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Calib* dest = (Calib*) G__getstructoffset();
   *dest = *(Calib*) libp->para[0].ref;
   const Calib& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DHF */
static int G__rootElibdict_336_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DHF* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 6
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new DHF(
(TDirectory*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int*) G__int(libp->para[4]), (int) G__int(libp->para[5]));
   } else {
     p = new((void*) gvp) DHF(
(TDirectory*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int*) G__int(libp->para[4]), (int) G__int(libp->para[5]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_DHF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DHF* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new DHF(
(char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int*) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
   } else {
     p = new((void*) gvp) DHF(
(char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int*) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_DHF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DHF* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new DHF(*(DHF*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) DHF(*(DHF*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_DHF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->Init((Align*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->AddHisto((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DHF*) G__getstructoffset())->GetHist((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DHF*) G__getstructoffset())->GetDir());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->Fill1D((char*) G__int(libp->para[0]), (Axis_t) G__double(libp->para[1])
, (Stat_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->Fill2D((char*) G__int(libp->para[0]), (Axis_t) G__double(libp->para[1])
, (Axis_t) G__double(libp->para[2]), (Stat_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->FillSelect((Event*) G__int(libp->para[0]), (RHClass*) G__int(libp->para[1])
, (Align*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->FillAll((Event*) G__int(libp->para[0]), (RHClass*) G__int(libp->para[1])
, (Align*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      ((DHF*) G__getstructoffset())->Define(
(char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (Axis_t) G__double(libp->para[3])
, (Axis_t) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (Axis_t) G__double(libp->para[6]), (Axis_t) G__double(libp->para[7])
, (int) G__int(libp->para[8]), (char*) G__int(libp->para[9]));
      G__setnull(result7);
      break;
   case 9:
      ((DHF*) G__getstructoffset())->Define(
(char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (Axis_t) G__double(libp->para[3])
, (Axis_t) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (Axis_t) G__double(libp->para[6]), (Axis_t) G__double(libp->para[7])
, (int) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((DHF*) G__getstructoffset())->Define(
(char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (Axis_t) G__double(libp->para[3])
, (Axis_t) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (Axis_t) G__double(libp->para[6]), (Axis_t) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->Define(
(char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (Axis_t) G__double(libp->para[3])
, (Axis_t) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (char*) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      G__letint(result7, 85, (long) ((DHF*) G__getstructoffset())->Define(
(char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (Axis_t) G__double(libp->para[4]), (Axis_t) G__double(libp->para[5])
, (int) G__int(libp->para[6]), (char*) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 85, (long) ((DHF*) G__getstructoffset())->Define(
(char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (Axis_t) G__double(libp->para[4]), (Axis_t) G__double(libp->para[5])
, (int) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) ((DHF*) G__getstructoffset())->Define((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (Axis_t) G__double(libp->para[4]), (Axis_t) G__double(libp->para[5])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((DHF*) G__getstructoffset())->Fill((int) G__int(libp->para[0]), (Cluster*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (Axis_t) G__double(libp->para[3])
, (Axis_t) G__double(libp->para[4]), (Stat_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((DHF*) G__getstructoffset())->Fill((int) G__int(libp->para[0]), (Cluster*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (Axis_t) G__double(libp->para[3])
, (Axis_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((DHF*) G__getstructoffset())->Fill((int) G__int(libp->para[0]), (Cluster*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (Axis_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((DHF*) G__getstructoffset())->FillCalib((int) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (Axis_t) G__double(libp->para[2]), (Axis_t) G__double(libp->para[3])
, (Stat_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((DHF*) G__getstructoffset())->FillCalib((int) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (Axis_t) G__double(libp->para[2]), (Axis_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((DHF*) G__getstructoffset())->FillCalib((int) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (Axis_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->BookHistos((Align*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->align_xy_positions((Align*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->align_ref_dyx_dxy((Align*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->align_dxx_dyy((Align*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->align_dxy_dyx((Align*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->residus((Event*) G__int(libp->para[0]), (Align*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->residus_petits((Event*) G__int(libp->para[0]), (Align*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->residus_echelles((Event*) G__int(libp->para[0]), (Align*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->residus_eff((Event*) G__int(libp->para[0]), (Align*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->residus_scan_va((Event*) G__int(libp->para[0]), (Align*) G__int(libp->para[1])
, (Calib*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((DHF*) G__getstructoffset())->divergences((Event*) G__int(libp->para[0]), (Align*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->hcalib((Calib*) G__int(libp->para[0]), (RHClass*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->EcrireHistos((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DHF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DHF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DHF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DHF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DHF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DHF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DHF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DHF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_336_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DHF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DHF G__TDHF;
static int G__rootElibdict_336_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DHF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DHF*) (soff+(sizeof(DHF)*i)))->~G__TDHF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DHF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DHF*) (soff))->~G__TDHF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rootElibdict_336_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DHF* dest = (DHF*) G__getstructoffset();
   *dest = *(DHF*) libp->para[0].ref;
   const DHF& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Trace */

/* Align */

/* Cluster */

/* RHClass */

/* Event */

/* Calib */

/* DHF */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncrootElibdict {
 public:
  G__Sizep2memfuncrootElibdict(): p(&G__Sizep2memfuncrootElibdict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncrootElibdict::*p)();
};

size_t G__get_sizep2memfuncrootElibdict()
{
  G__Sizep2memfuncrootElibdict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancerootElibdict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__rootElibdictLN_Trace))) {
     Trace *G__Lderived;
     G__Lderived=(Trace*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__rootElibdictLN_Trace),G__get_linked_tagnum(&G__rootElibdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__rootElibdictLN_Align))) {
     Align *G__Lderived;
     G__Lderived=(Align*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__rootElibdictLN_Align),G__get_linked_tagnum(&G__rootElibdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__rootElibdictLN_Cluster))) {
     Cluster *G__Lderived;
     G__Lderived=(Cluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__rootElibdictLN_Cluster),G__get_linked_tagnum(&G__rootElibdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__rootElibdictLN_RHClass))) {
     RHClass *G__Lderived;
     G__Lderived=(RHClass*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__rootElibdictLN_RHClass),G__get_linked_tagnum(&G__rootElibdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__rootElibdictLN_Event))) {
     Event *G__Lderived;
     G__Lderived=(Event*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__rootElibdictLN_Event),G__get_linked_tagnum(&G__rootElibdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__rootElibdictLN_DHF))) {
     DHF *G__Lderived;
     G__Lderived=(DHF*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__rootElibdictLN_DHF),G__get_linked_tagnum(&G__rootElibdictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__rootElibdictLN_DHF),G__get_linked_tagnum(&G__rootElibdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablerootElibdict() {

   /* Setting up typedef entry */
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Axis_t",100,-1,0,-1);
   G__setnewtype(-1,"Axis values type (double)",0);
   G__search_typename2("Stat_t",100,-1,0,-1);
   G__setnewtype(-1,"Statistics type (double)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__rootElibdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__rootElibdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootElibdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__rootElibdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootElibdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__rootElibdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__rootElibdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__rootElibdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__rootElibdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__rootElibdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSym<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparse<Double_t>",117,G__get_linked_tagnum(&G__rootElibdictLN_TMatrixTSparselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("calib",117,G__get_linked_tagnum(&G__rootElibdictLN_calib),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Trace */
static void G__setup_memvarTrace(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootElibdictLN_Trace));
   { Trace *p; p=(Trace*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),100,0,0,-1,-1,-1,1,"x[6]=",0,"avec alignment    ");
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),100,0,0,-1,-1,-1,1,"y[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),100,0,0,-1,-1,-1,1,"z[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xsa)-(long)(p)),100,0,0,-1,-1,-1,1,"xsa[6]=",0,"sans alignment positions centree    ");
   G__memvar_setup((void*)((long)(&p->ysa)-(long)(p)),100,0,0,-1,-1,-1,1,"ysa[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xp)-(long)(p)),100,0,0,-1,-1,-1,1,"xp[6]=",0,"positions en pistes    ");
   G__memvar_setup((void*)((long)(&p->yp)-(long)(p)),100,0,0,-1,-1,-1,1,"yp[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->amas_entree)-(long)(p)),105,0,0,-1,-1,-1,1,"amas_entree[2][6]=",0,"les places des amas du trace dans la liste Cls");
   G__memvar_setup((void*)((long)(&p->amas_signal)-(long)(p)),102,0,0,-1,-1,-1,1,"amas_signal[2][6]=",0,"les signaux des amas");
   G__memvar_setup((void*)((long)(&p->dxdz)-(long)(p)),102,0,0,-1,-1,-1,1,"dxdz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dydz)-(long)(p)),102,0,0,-1,-1,-1,1,"dydz=",0,"les divergences du faisceau");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Align */
static void G__setup_memvarAlign(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootElibdictLN_Align));
   { Align *p; p=(Align*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fitxz)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TLinearFitter),-1,-1,1,"fitxz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fityz)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TLinearFitter),-1,-1,1,"fityz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xp)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"xp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yp)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"yp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zp)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"zp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->npts)-(long)(p)),105,0,0,-1,-1,-1,1,"npts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntrace)-(long)(p)),105,0,0,-1,-1,-1,1,"ntrace=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntrace_eff)-(long)(p)),102,0,0,-1,-1,-1,1,"ntrace_eff[2][6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nfit1)-(long)(p)),105,0,0,-1,-1,-1,1,"nfit1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nfit2)-(long)(p)),105,0,0,-1,-1,-1,1,"nfit2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nfit2_2)-(long)(p)),105,0,0,-1,-1,-1,1,"nfit2_2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nfit3)-(long)(p)),105,0,0,-1,-1,-1,1,"nfit3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nfit4)-(long)(p)),105,0,0,-1,-1,-1,1,"nfit4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nfit5)-(long)(p)),105,0,0,-1,-1,-1,1,"nfit5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nfit6)-(long)(p)),105,0,0,-1,-1,-1,1,"nfit6=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nfit7)-(long)(p)),105,0,0,-1,-1,-1,1,"nfit7=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nfit8)-(long)(p)),105,0,0,-1,-1,-1,1,"nfit8=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xval1)-(long)(p)),102,0,0,-1,-1,-1,1,"xval1[5000]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yval1)-(long)(p)),102,0,0,-1,-1,-1,1,"yval1[5000]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xval2)-(long)(p)),102,0,0,-1,-1,-1,1,"xval2[5000]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yval2)-(long)(p)),102,0,0,-1,-1,-1,1,"yval2[5000]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xval2_2)-(long)(p)),102,0,0,-1,-1,-1,1,"xval2_2[5000]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yval2_2)-(long)(p)),102,0,0,-1,-1,-1,1,"yval2_2[5000]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xval3)-(long)(p)),102,0,0,-1,-1,-1,1,"xval3[5000]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yval3)-(long)(p)),102,0,0,-1,-1,-1,1,"yval3[5000]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xval4)-(long)(p)),102,0,0,-1,-1,-1,1,"xval4[5000]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yval4)-(long)(p)),102,0,0,-1,-1,-1,1,"yval4[5000]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xval5)-(long)(p)),102,0,0,-1,-1,-1,1,"xval5[5000]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yval5)-(long)(p)),102,0,0,-1,-1,-1,1,"yval5[5000]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xval6)-(long)(p)),102,0,0,-1,-1,-1,1,"xval6[5000]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yval6)-(long)(p)),102,0,0,-1,-1,-1,1,"yval6[5000]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xval7)-(long)(p)),102,0,0,-1,-1,-1,1,"xval7[5000]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yval7)-(long)(p)),102,0,0,-1,-1,-1,1,"yval7[5000]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xval8)-(long)(p)),102,0,0,-1,-1,-1,1,"xval8[5000]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yval8)-(long)(p)),102,0,0,-1,-1,-1,1,"yval8[5000]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->depz)-(long)(p)),102,0,0,-1,-1,-1,1,"depz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->resx)-(long)(p)),102,0,0,-1,-1,-1,1,"resx[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->resex)-(long)(p)),102,0,0,-1,-1,-1,1,"resex[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->resy)-(long)(p)),102,0,0,-1,-1,-1,1,"resy[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->resey)-(long)(p)),102,0,0,-1,-1,-1,1,"resey[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reseffx)-(long)(p)),102,0,0,-1,-1,-1,1,"reseffx[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reseffy)-(long)(p)),102,0,0,-1,-1,-1,1,"reseffy[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->resxech)-(long)(p)),102,0,0,-1,-1,-1,1,"resxech[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->resexech)-(long)(p)),102,0,0,-1,-1,-1,1,"resexech[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->resyech)-(long)(p)),102,0,0,-1,-1,-1,1,"resyech[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reseyech)-(long)(p)),102,0,0,-1,-1,-1,1,"reseyech[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ressx)-(long)(p)),102,0,0,-1,-1,-1,1,"ressx[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ressy)-(long)(p)),102,0,0,-1,-1,-1,1,"ressy[4]=",0,"residus pour scan va");
   G__memvar_setup((void*)((long)(&p->resx_pos0)-(long)(p)),102,0,0,-1,-1,-1,1,"resx_pos0[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->resy_pos0)-(long)(p)),102,0,0,-1,-1,-1,1,"resy_pos0[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->resx_pos4)-(long)(p)),102,0,0,-1,-1,-1,1,"resx_pos4[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->resy_pos4)-(long)(p)),102,0,0,-1,-1,-1,1,"resy_pos4[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ppiste_n)-(long)(p)),102,0,0,-1,-1,-1,1,"ppiste_n[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deux_plaq_n)-(long)(p)),105,0,0,-1,-1,-1,1,"deux_plaq_n[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xdx)-(long)(p)),100,0,0,-1,-1,-1,1,"xdx[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ydy)-(long)(p)),100,0,0,-1,-1,-1,1,"ydy[6]=",0,"coordonnees x/y avant les corrections dxy et dyx");
   G__memvar_setup((void*)((long)(&p->xpospred)-(long)(p)),100,0,0,-1,-1,-1,1,"xpospred[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ypospred)-(long)(p)),100,0,0,-1,-1,-1,1,"ypospred[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ztdr)-(long)(p)),105,0,0,-1,-1,-1,1,"ztdr[6]=",0,"ordre des tdrs par rapport a la direction du faisceau");
   G__memvar_setup((void*)((long)(&p->ref1)-(long)(p)),105,0,0,-1,-1,-1,1,"ref1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ref2)-(long)(p)),105,0,0,-1,-1,-1,1,"ref2=",0,"detecteurs reference pour l'alignement - position dans la lecture");
   G__memvar_setup((void*)((long)(&p->ind3)-(long)(p)),105,0,0,-1,-1,-1,1,"ind3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ind4)-(long)(p)),105,0,0,-1,-1,-1,1,"ind4=",0,"les deux autres echelles AMS02");
   G__memvar_setup((void*)((long)(&p->indp1)-(long)(p)),105,0,0,-1,-1,-1,1,"indp1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->indp2)-(long)(p)),105,0,0,-1,-1,-1,1,"indp2=",0,"les deux petits detecteurs ");
   G__memvar_setup((void*)((long)(&p->mauvais)-(long)(p)),105,0,0,-1,-1,-1,1,"mauvais[6][1024]=",0,"signalisation des canaux chauds");
   G__memvar_setup((void*)((long)(&p->align)-(long)(p)),105,0,0,-1,-1,-1,1,"align=",0,"pour la gestion de l'alignement");
   G__memvar_setup((void*)((long)(&p->algpar)-(long)(p)),100,0,0,-1,-1,-1,1,"algpar[15][6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->algpar_2)-(long)(p)),100,0,0,-1,-1,-1,1,"algpar_2[15][6]=",0,"si une deuxieme plaquette");
   G__memvar_setup((void*)((long)(&p->algpar_fich)-(long)(p)),100,0,0,-1,-1,-1,1,"algpar_fich[8][11][6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->delta_y_ind4)-(long)(p)),100,0,0,-1,-1,-1,1,"delta_y_ind4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->plaq_dim)-(long)(p)),102,0,0,-1,-1,-1,1,"plaq_dim[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->plaq_dim_active)-(long)(p)),102,0,0,-1,-1,-1,1,"plaq_dim_active[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ecart)-(long)(p)),102,0,0,-1,-1,-1,1,"ecart=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->amaspar)-(long)(p)),105,0,0,-1,-1,-1,1,"amaspar[2][6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->feta_p)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TH1D),-1,-1,1,"feta_p[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->feta_n)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TH1D),-1,-1,1,"feta_n[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->feta3_p)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TH1D),-1,-1,1,"feta3_p[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->feta3_n)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TH1D),-1,-1,1,"feta3_n[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bord_eta3_p)-(long)(p)),102,0,0,-1,-1,-1,1,"bord_eta3_p[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bord_eta3_n)-(long)(p)),102,0,0,-1,-1,-1,1,"bord_eta3_n[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Cluster */
static void G__setup_memvarCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootElibdictLN_Cluster));
   { Cluster *p; p=(Cluster*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->address)-(long)(p)),105,0,0,-1,-1,-1,1,"address=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->piste_eta)-(long)(p)),105,0,0,-1,-1,-1,1,"piste_eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->piste_eta3)-(long)(p)),105,0,0,-1,-1,-1,1,"piste_eta3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->length)-(long)(p)),105,0,0,-1,-1,-1,1,"length=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->npiste)-(long)(p)),105,0,0,-1,-1,-1,1,"npiste=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Signal)-(long)(p)),102,0,0,-1,-1,-1,1,"Signal[50]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Noise)-(long)(p)),102,0,0,-1,-1,-1,1,"Noise[50]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Status)-(long)(p)),105,0,0,-1,-1,-1,1,"Status[50]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ladder)-(long)(p)),105,0,0,-1,-1,-1,1,"ladder=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->side)-(long)(p)),105,0,0,-1,-1,-1,1,"side=",0,"0 S / 1 K");
   G__memvar_setup((void*)((long)(&p->bad)-(long)(p)),105,0,0,-1,-1,-1,1,"bad=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->golden)-(long)(p)),105,0,0,-1,-1,-1,1,"golden=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RHClass */
static void G__setup_memvarRHClass(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootElibdictLN_RHClass));
   { RHClass *p; p=(RHClass*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Run)-(long)(p)),105,0,0,-1,-1,-1,1,"Run=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->date)-(long)(p)),99,0,0,-1,-1,-1,1,"date[30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nJinf)-(long)(p)),105,0,0,-1,-1,-1,1,"nJinf=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->JinfMap)-(long)(p)),105,0,0,-1,-1,-1,1,"JinfMap[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntdrRaw)-(long)(p)),105,0,0,-1,-1,-1,1,"ntdrRaw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tdrRawMap)-(long)(p)),105,0,0,-1,-1,-1,1,"tdrRawMap[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntdrCmp)-(long)(p)),105,0,0,-1,-1,-1,1,"ntdrCmp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tdrCmpMap)-(long)(p)),105,0,0,-1,-1,-1,1,"tdrCmpMap[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CNMean)-(long)(p)),100,0,0,-1,-1,-1,1,"CNMean[24][16]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CNSigma)-(long)(p)),100,0,0,-1,-1,-1,1,"CNSigma[24][16]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Event */
static void G__setup_memvarEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootElibdictLN_Event));
   { Event *p; p=(Event*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Evtnum)-(long)(p)),105,0,0,-1,-1,-1,1,"Evtnum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->JINJStatus)-(long)(p)),105,0,0,-1,-1,-1,1,"JINJStatus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->JINFStatus)-(long)(p)),105,0,0,-1,-1,-1,1,"JINFStatus[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TDRStatus)-(long)(p)),105,0,0,-1,-1,-1,1,"TDRStatus[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CNoise)-(long)(p)),100,0,0,-1,-1,-1,1,"CNoise[24][16]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->NClus)-(long)(p)),105,0,0,-1,-1,-1,1,"NClus[24][2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->NClusTot)-(long)(p)),105,0,0,-1,-1,-1,1,"NClusTot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->notgood)-(long)(p)),105,0,0,-1,-1,-1,1,"notgood=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Cls)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TClonesArray),-1,-1,1,"Cls=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->NTraceTot)-(long)(p)),105,0,0,-1,-1,-1,1,"NTraceTot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TraType)-(long)(p)),105,0,0,-1,-1,-1,1,"TraType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tra)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TClonesArray),-1,-1,1,"Tra=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rawtdrnum)-(long)(p)),105,0,0,-1,-1,-1,1,"rawtdrnum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Signal)-(long)(p)),115,0,0,-1,-1,-1,1,"Signal[8][1024]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ReadTDR)-(long)(p)),115,0,0,-1,-1,-1,1,"ReadTDR[24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Calib */
static void G__setup_memvarCalib(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootElibdictLN_Calib));
   { Calib *p; p=(Calib*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->RunNum)-(long)(p)),105,0,0,-1,-1,-1,1,"RunNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->caldir)-(long)(p)),99,0,0,-1,-1,-1,1,"caldir[300]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cals)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__rootElibdictLN_calib),G__defined_typename("calib"),-1,1,"cals[24]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DHF */
static void G__setup_memvarDHF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootElibdictLN_DHF));
   { DHF *p; p=(DHF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"NTdr=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"TDRNum[24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TDirectory),-1,-1,2,"fDir=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TObjArray),-1,-1,2,"fHlist=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TObjArray),-1,-1,2,"fDHlist0=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TObjArray),-1,-1,2,"fDHlist1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TObjArray),-1,-1,2,"fDHlist2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TObjArray),-1,-1,2,"fDHlist3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TObjArray),-1,-1,2,"fDHlist4=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TObjArray),-1,-1,2,"fDHlist5=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TObjArray),-1,-1,2,"fDHlistTop=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fhist)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TFile),-1,-1,1,"fhist=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Ev)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_Event),-1,-1,1,"Ev=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->runno)-(long)(p)),105,0,0,-1,-1,-1,1,"runno=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarrootElibdict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTrace(void) {
   /* Trace */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootElibdictLN_Trace));
   G__memfunc_setup("Trace",495,G__rootElibdict_329_0_1, 105, G__get_linked_tagnum(&G__rootElibdictLN_Trace), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__rootElibdict_329_0_2, 85, G__get_linked_tagnum(&G__rootElibdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Trace::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__rootElibdict_329_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Trace::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__rootElibdict_329_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Trace::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__rootElibdict_329_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Trace::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__rootElibdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__rootElibdict_329_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__rootElibdict_329_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Trace::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__rootElibdict_329_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Trace::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__rootElibdict_329_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Trace::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__rootElibdict_329_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Trace::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Trace", 495, G__rootElibdict_329_0_14, (int) ('i'), G__get_linked_tagnum(&G__rootElibdictLN_Trace), -1, 0, 1, 1, 1, 0, "u 'Trace' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Trace", 621, G__rootElibdict_329_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rootElibdict_329_0_16, (int) ('u'), G__get_linked_tagnum(&G__rootElibdictLN_Trace), -1, 1, 1, 1, 1, 0, "u 'Trace' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAlign(void) {
   /* Align */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootElibdictLN_Align));
   G__memfunc_setup("Align",491,G__rootElibdict_330_0_1, 105, G__get_linked_tagnum(&G__rootElibdictLN_Align), -1, 0, 2, 1, 1, 0, 
"i - - 0 - ival i - - 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaJXYpos",763,G__rootElibdict_330_0_2, 121, -1, -1, 0, 13, 1, 1, 0, 
"i - - 0 - mode d - - 0 - x00 "
"d - - 0 - y00 d - - 0 - x01 "
"d - - 0 - y01 d - - 0 - x02 "
"d - - 0 - y02 d - - 0 - x03 "
"d - - 0 - y03 d - - 0 - x04 "
"d - - 0 - y04 d - - 0 - x05 "
"d - - 0 - y05", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaJRotRef1",891,G__rootElibdict_330_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - pente1 d - - 0 - inter1 "
"d - - 0 - pente2 d - - 0 - inter2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaJRotxxyy",1039,G__rootElibdict_330_0_4, 121, -1, -1, 0, 18, 1, 1, 0, 
"d - - 0 - pente1 d - - 0 - inter1 "
"d - - 0 - pente2 d - - 0 - inter2 "
"d - - 0 - pente3 d - - 0 - inter3 "
"d - - 0 - pente4 d - - 0 - inter4 "
"d - - 0 - pente5 d - - 0 - inter5 "
"d - - 0 - pente6 d - - 0 - inter6 "
"d - - 0 - pente7 d - - 0 - inter7 "
"d - - 0 - pente8 d - - 0 - inter8 "
"d - - 0 - pente2_2 d - - 0 - inter2_2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaJRotxyyx",1039,G__rootElibdict_330_0_5, 121, -1, -1, 0, 16, 1, 1, 0, 
"d - - 0 - pente1 d - - 0 - inter1 "
"d - - 0 - pente2 d - - 0 - inter2 "
"d - - 0 - pente3 d - - 0 - inter3 "
"d - - 0 - pente4 d - - 0 - inter4 "
"d - - 0 - pente5 d - - 0 - inter5 "
"d - - 0 - pente6 d - - 0 - inter6 "
"d - - 0 - pente7 d - - 0 - inter7 "
"d - - 0 - pente8 d - - 0 - inter8", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deux_plaq",963,G__rootElibdict_330_0_6, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("coord",535,G__rootElibdict_330_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Trace' - 0 - tra", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("apos",435,G__rootElibdict_330_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - i i - - 0 - j "
"U 'Trace' - 0 - tra", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("apos_dxy_dyx",1307,G__rootElibdict_330_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - i U 'Trace' - 0 - tra", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ipred",532,G__rootElibdict_330_0_10, 102, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - i i - - 0 - j "
"U 'Trace' - 0 - tra", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("apos",435,G__rootElibdict_330_0_11, 100, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - h i - - 0 - i "
"i - - 0 - j U 'Trace' - 0 - tra", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EcrireAlgPar",1169,G__rootElibdict_330_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LireAlgPar",963,G__rootElibdict_330_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LireFichAlgPar",1341,G__rootElibdict_330_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LireFichAmasPar",1451,G__rootElibdict_330_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LireFonctionEta",1510,G__rootElibdict_330_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LireFonctionEta3",1561,G__rootElibdict_330_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ligne_projx",1185,G__rootElibdict_330_0_18, 100, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - i i - - 0 - j "
"i - - 0 - k U 'Trace' - 0 - tra", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ligne_projy",1186,G__rootElibdict_330_0_19, 100, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - i i - - 0 - j "
"i - - 0 - k U 'Trace' - 0 - tra", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ligne_projxz",1307,G__rootElibdict_330_0_20, 100, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - i i - - 0 - j "
"f - - 0 - z U 'Trace' - 0 - tra", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ligne_projyz",1308,G__rootElibdict_330_0_21, 100, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - i i - - 0 - j "
"f - - 0 - z U 'Trace' - 0 - tra", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("div_dxdz",860,G__rootElibdict_330_0_22, 100, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - i i - - 0 - j "
"U 'Trace' - 0 - tra", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("div_dydz",861,G__rootElibdict_330_0_23, 100, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - i i - - 0 - j "
"U 'Trace' - 0 - tra", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("div_dxdz_lin",1278,G__rootElibdict_330_0_24, 100, -1, -1, 0, 2, 1, 1, 0, 
"U 'Trace' - 0 - tra i - - 0 - exclu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("div_dxdz_lin_ref",1690,G__rootElibdict_330_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Trace' - 0 - tra", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("div_dxdz_lin_pos123",1861,G__rootElibdict_330_0_26, 100, -1, -1, 0, 2, 1, 1, 0, 
"U 'Trace' - 0 - tra i - - 0 - exclu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("div_dxdz_lin_proj_pos0",2297,G__rootElibdict_330_0_27, 100, -1, -1, 0, 1, 1, 1, 0, "U 'Trace' - 0 - tra", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("div_dxdz_lin_proj_pos4",2301,G__rootElibdict_330_0_28, 100, -1, -1, 0, 1, 1, 1, 0, "U 'Trace' - 0 - tra", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("div_dxdz_lin_eff",1678,G__rootElibdict_330_0_29, 105, -1, -1, 0, 2, 1, 1, 0, 
"U 'Trace' - 0 - tra i - - 0 - exclu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("div_dydz_lin",1279,G__rootElibdict_330_0_30, 100, -1, -1, 0, 2, 1, 1, 0, 
"U 'Trace' - 0 - tra i - - 0 - exclu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("div_dydz_lin_ref",1691,G__rootElibdict_330_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Trace' - 0 - tra", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("div_dydz_lin_pos123",1862,G__rootElibdict_330_0_32, 100, -1, -1, 0, 2, 1, 1, 0, 
"U 'Trace' - 0 - tra i - - 0 - exclu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("div_dydz_lin_proj_pos0",2298,G__rootElibdict_330_0_33, 100, -1, -1, 0, 1, 1, 1, 0, "U 'Trace' - 0 - tra", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("div_dydz_lin_proj_pos4",2302,G__rootElibdict_330_0_34, 100, -1, -1, 0, 1, 1, 1, 0, "U 'Trace' - 0 - tra", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("div_dydz_lin_eff",1679,G__rootElibdict_330_0_35, 105, -1, -1, 0, 2, 1, 1, 0, 
"U 'Trace' - 0 - tra i - - 0 - exclu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sind",430,G__rootElibdict_330_0_36, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "f - - 0 - deg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__rootElibdict_330_0_37, 85, G__get_linked_tagnum(&G__rootElibdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Align::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__rootElibdict_330_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Align::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__rootElibdict_330_0_39, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Align::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__rootElibdict_330_0_40, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Align::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__rootElibdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__rootElibdict_330_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__rootElibdict_330_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Align::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__rootElibdict_330_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Align::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__rootElibdict_330_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Align::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__rootElibdict_330_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Align::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Align", 491, G__rootElibdict_330_0_49, (int) ('i'), G__get_linked_tagnum(&G__rootElibdictLN_Align), -1, 0, 1, 1, 1, 0, "u 'Align' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Align", 617, G__rootElibdict_330_0_50, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rootElibdict_330_0_51, (int) ('u'), G__get_linked_tagnum(&G__rootElibdictLN_Align), -1, 1, 1, 1, 1, 0, "u 'Align' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCluster(void) {
   /* Cluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootElibdictLN_Cluster));
   G__memfunc_setup("GetCSignal",961,(G__InterfaceMethod) NULL, 102, -1, -1, 0, 1, 1, 4, 0, "i - - 0 - aa", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Cluster",738,G__rootElibdict_331_0_2, 105, G__get_linked_tagnum(&G__rootElibdictLN_Cluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Cluster",738,G__rootElibdict_331_0_3, 105, G__get_linked_tagnum(&G__rootElibdictLN_Cluster), -1, 0, 1, 1, 1, 0, "u 'Cluster' - 1 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Build",496,G__rootElibdict_331_0_4, 121, -1, -1, 0, 8, 1, 1, 0, 
"i - - 0 - lad i - - 0 - sid "
"i - - 0 - add i - - 0 - len "
"F - - 0 - sig F - - 0 - noi "
"I - - 0 - stat i - - 0 '0' badin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__rootElibdict_331_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeed",673,G__rootElibdict_331_0_6, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeedStatus",1317,G__rootElibdict_331_0_7, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeedAdd",938,G__rootElibdict_331_0_8, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeedVal",964,G__rootElibdict_331_0_9, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeedSN",834,G__rootElibdict_331_0_10, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTotNoise",1109,G__rootElibdict_331_0_11, 102, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - seuil", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLength",898,G__rootElibdict_331_0_12, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCoG",537,G__rootElibdict_331_0_13, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCoGN",615,G__rootElibdict_331_0_14, 102, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositionEtaP",1503,G__rootElibdict_331_0_15, 102, -1, -1, 0, 2, 1, 1, 0, 
"U 'Align' - 0 - alg i - - 0 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositionEtaN",1501,G__rootElibdict_331_0_16, 102, -1, -1, 0, 2, 1, 1, 0, 
"U 'Align' - 0 - alg i - - 0 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositionEta3N",1552,G__rootElibdict_331_0_17, 102, -1, -1, 0, 2, 1, 1, 0, 
"U 'Align' - 0 - alg i - - 0 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTotSig",890,G__rootElibdict_331_0_18, 102, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - seuil", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTotSN",760,G__rootElibdict_331_0_19, 102, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - seuil", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEtaTrue",986,G__rootElibdict_331_0_20, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEta3",621,G__rootElibdict_331_0_21, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEta",570,G__rootElibdict_331_0_22, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEtaRaw",868,G__rootElibdict_331_0_23, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__rootElibdict_331_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GoldRegion",1002,G__rootElibdict_331_0_25, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLargeur",1010,G__rootElibdict_331_0_26, 105, -1, -1, 0, 1, 1, 1, 0, "f - - 0 '1.' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__rootElibdict_331_0_27, 85, G__get_linked_tagnum(&G__rootElibdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Cluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__rootElibdict_331_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__rootElibdict_331_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Cluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__rootElibdict_331_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Cluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__rootElibdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__rootElibdict_331_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__rootElibdict_331_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__rootElibdict_331_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Cluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__rootElibdict_331_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__rootElibdict_331_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Cluster::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Cluster", 864, G__rootElibdict_331_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rootElibdict_331_0_40, (int) ('u'), G__get_linked_tagnum(&G__rootElibdictLN_Cluster), -1, 1, 1, 1, 1, 0, "u 'Cluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRHClass(void) {
   /* RHClass */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootElibdictLN_RHClass));
   G__memfunc_setup("RHClass",656,G__rootElibdict_332_0_1, 105, G__get_linked_tagnum(&G__rootElibdictLN_RHClass), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPos",691,G__rootElibdict_332_0_2, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - tdrnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__rootElibdict_332_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__rootElibdict_332_0_4, 85, G__get_linked_tagnum(&G__rootElibdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&RHClass::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__rootElibdict_332_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RHClass::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__rootElibdict_332_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&RHClass::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__rootElibdict_332_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&RHClass::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__rootElibdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__rootElibdict_332_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__rootElibdict_332_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RHClass::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__rootElibdict_332_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RHClass::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__rootElibdict_332_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RHClass::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__rootElibdict_332_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RHClass::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("RHClass", 656, G__rootElibdict_332_0_16, (int) ('i'), G__get_linked_tagnum(&G__rootElibdictLN_RHClass), -1, 0, 1, 1, 1, 0, "u 'RHClass' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RHClass", 782, G__rootElibdict_332_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rootElibdict_332_0_18, (int) ('u'), G__get_linked_tagnum(&G__rootElibdictLN_RHClass), -1, 1, 1, 1, 1, 0, "u 'RHClass' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEvent(void) {
   /* Event */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootElibdictLN_Event));
   G__memfunc_setup("Event",514,G__rootElibdict_333_0_1, 105, G__get_linked_tagnum(&G__rootElibdictLN_Event), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__rootElibdict_333_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCluster",1003,G__rootElibdict_333_0_3, 85, G__get_linked_tagnum(&G__rootElibdictLN_Cluster), -1, 0, 2, 1, 1, 0, 
"i - - 0 - lad i - - 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCluster",1026,G__rootElibdict_333_0_4, 85, G__get_linked_tagnum(&G__rootElibdictLN_Cluster), -1, 0, 1, 1, 1, 0, "i - - 0 - ii", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trace",527,G__rootElibdict_333_0_5, 105, -1, -1, 0, 2, 1, 1, 0, 
"U 'RHClass' - 0 - rh U 'Align' - 0 - alg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NGoldenClus",1086,G__rootElibdict_333_0_6, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - lad i - - 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__rootElibdict_333_0_7, 85, G__get_linked_tagnum(&G__rootElibdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Event::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__rootElibdict_333_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Event::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__rootElibdict_333_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Event::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__rootElibdict_333_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Event::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__rootElibdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__rootElibdict_333_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__rootElibdict_333_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Event::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__rootElibdict_333_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Event::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__rootElibdict_333_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Event::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__rootElibdict_333_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Event::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Event", 514, G__rootElibdict_333_0_19, (int) ('i'), G__get_linked_tagnum(&G__rootElibdictLN_Event), -1, 0, 1, 1, 1, 0, "u 'Event' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Event", 640, G__rootElibdict_333_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rootElibdict_333_0_21, (int) ('u'), G__get_linked_tagnum(&G__rootElibdictLN_Event), -1, 1, 1, 1, 1, 0, "u 'Event' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCalib(void) {
   /* Calib */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootElibdictLN_Calib));
   G__memfunc_setup("Calib",475,G__rootElibdict_335_0_1, 105, G__get_linked_tagnum(&G__rootElibdictLN_Calib), -1, 0, 1, 1, 1, 0, "i - - 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calpos",610,G__rootElibdict_335_0_2, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - tdrnum U 'RHClass' - 0 - rh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RepererCalibs",1315,G__rootElibdict_335_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'RHClass' - 0 - rh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LireCalib",871,G__rootElibdict_335_0_4, 105, -1, -1, 0, 3, 1, 1, 0, 
"E - - 0 - fich U 'calib' 'calib' 0 - cal "
"i - - 0 - ntdr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ret_piedestal",1381,G__rootElibdict_335_0_5, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - ntdr i - - 0 - canal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ret_sigma",955,G__rootElibdict_335_0_6, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - ntdr i - - 0 - canal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ret_statut",1103,G__rootElibdict_335_0_7, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - ntdr i - - 0 - canal", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Calib", 475, G__rootElibdict_335_0_8, (int) ('i'), G__get_linked_tagnum(&G__rootElibdictLN_Calib), -1, 0, 1, 1, 1, 0, "u 'Calib' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Calib", 601, G__rootElibdict_335_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rootElibdict_335_0_10, (int) ('u'), G__get_linked_tagnum(&G__rootElibdictLN_Calib), -1, 1, 1, 1, 1, 0, "u 'Calib' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDHF(void) {
   /* DHF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootElibdictLN_DHF));
   G__memfunc_setup("DHF",210,G__rootElibdict_336_0_1, 105, G__get_linked_tagnum(&G__rootElibdictLN_DHF), -1, 0, 6, 1, 1, 0, 
"U 'TDirectory' - 0 - Dir C - - 0 - name "
"C - - 0 - title i - - 0 - ntdr "
"I - - 0 - tdrnum i - - 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DHF",210,G__rootElibdict_336_0_2, 105, G__get_linked_tagnum(&G__rootElibdictLN_DHF), -1, 0, 5, 1, 1, 0, 
"C - - 0 - name C - - 0 - title "
"i - - 0 - ntdr I - - 0 - tdrnum "
"i - - 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DHF",210,G__rootElibdict_336_0_3, 105, G__get_linked_tagnum(&G__rootElibdictLN_DHF), -1, 0, 1, 1, 1, 0, "u 'DHF' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__rootElibdict_336_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Align' - 0 - alg", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddHisto",784,G__rootElibdict_336_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - kk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHist",696,G__rootElibdict_336_0_6, 85, G__get_linked_tagnum(&G__rootElibdictLN_TObject), -1, 0, 1, 1, 1, 0, "C - - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDir",575,G__rootElibdict_336_0_7, 85, G__get_linked_tagnum(&G__rootElibdictLN_TDirectory), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill1D",508,G__rootElibdict_336_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 0 - histo d - 'Axis_t' 0 - X "
"d - 'Stat_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill2D",509,G__rootElibdict_336_0_9, 121, -1, -1, 0, 4, 1, 1, 0, 
"C - - 0 - histo d - 'Axis_t' 0 - X1 "
"d - 'Axis_t' 0 - X2 d - 'Stat_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillSelect",999,G__rootElibdict_336_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'Event' - 0 - ev U 'RHClass' - 0 - rh "
"U 'Align' - 0 - alg", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillAll",672,G__rootElibdict_336_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'Event' - 0 - ev U 'RHClass' - 0 - rh "
"U 'Align' - 0 - alg", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Define",587,G__rootElibdict_336_0_12, 121, -1, -1, 0, 10, 1, 1, 0, 
"C - - 0 - name C - - 0 - title "
"i - - 0 - binx d - 'Axis_t' 0 - lowx "
"d - 'Axis_t' 0 - upx i - - 0 - biny "
"d - 'Axis_t' 0 - lowy d - 'Axis_t' 0 - upy "
"i - - 0 '0' sk C - - 0 '0' dirname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Define",587,G__rootElibdict_336_0_13, 121, -1, -1, 0, 7, 1, 1, 0, 
"C - - 0 - name C - - 0 - title "
"i - - 0 - binx d - 'Axis_t' 0 - lowx "
"d - 'Axis_t' 0 - upx i - - 0 - sk "
"C - - 0 - dirname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Define",587,G__rootElibdict_336_0_14, 85, G__get_linked_tagnum(&G__rootElibdictLN_TDirectory), -1, 0, 8, 1, 1, 0, 
"C - - 0 - prof C - - 0 - name "
"C - - 0 - title i - - 0 - binx "
"d - 'Axis_t' 0 - lowx d - 'Axis_t' 0 - upx "
"i - - 0 '0' sk C - - 0 '0' dirname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__rootElibdict_336_0_15, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - sk U 'Cluster' - 0 - lad "
"C - - 0 - histo d - 'Axis_t' 0 - X1 "
"d - 'Axis_t' 0 '1' X2 d - 'Stat_t' 0 '1.' w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillCalib",866,G__rootElibdict_336_0_16, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - ntdr C - - 0 - histo "
"d - 'Axis_t' 0 - X1 d - 'Axis_t' 0 '1' X2 "
"d - 'Stat_t' 0 '1.' w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BookHistos",1029,G__rootElibdict_336_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Align' - 0 - alg", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("align_xy_positions",1954,G__rootElibdict_336_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Align' - 0 - alg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("align_ref_dyx_dxy",1807,G__rootElibdict_336_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Align' - 0 - alg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("align_dxx_dyy",1395,G__rootElibdict_336_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Align' - 0 - alg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("align_dxy_dyx",1395,G__rootElibdict_336_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Align' - 0 - alg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("residus",767,G__rootElibdict_336_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'Event' - 0 - ev U 'Align' - 0 - alg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("residus_petits",1527,G__rootElibdict_336_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'Event' - 0 - ev U 'Align' - 0 - alg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("residus_echelles",1699,G__rootElibdict_336_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'Event' - 0 - ev U 'Align' - 0 - alg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("residus_eff",1167,G__rootElibdict_336_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'Event' - 0 - ev U 'Align' - 0 - alg "
"i - - 0 - fin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("residus_scan_va",1593,G__rootElibdict_336_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'Event' - 0 - ev U 'Align' - 0 - alg "
"U 'Calib' - 0 - cal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("divergences",1167,G__rootElibdict_336_0_27, 105, -1, -1, 0, 2, 1, 1, 0, 
"U 'Event' - 0 - ev U 'Align' - 0 - alg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hcalib",611,G__rootElibdict_336_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'Calib' - 0 - cal U 'RHClass' - 0 - rh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EcrireHistos",1236,G__rootElibdict_336_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - ffnom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHlist",804,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__rootElibdictLN_TObjArray), -1, 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Sumw2",478,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__rootElibdict_336_0_32, 85, G__get_linked_tagnum(&G__rootElibdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DHF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__rootElibdict_336_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DHF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__rootElibdict_336_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DHF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__rootElibdict_336_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DHF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__rootElibdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__rootElibdict_336_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__rootElibdict_336_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DHF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__rootElibdict_336_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DHF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__rootElibdict_336_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DHF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__rootElibdict_336_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DHF::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~DHF", 336, G__rootElibdict_336_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rootElibdict_336_0_45, (int) ('u'), G__get_linked_tagnum(&G__rootElibdictLN_DHF), -1, 1, 1, 1, 1, 0, "u 'DHF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncrootElibdict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalrootElibdict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcrootElibdict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__rootElibdictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TDirectory = { "TDirectory" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__rootElibdictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMatrixTSymlEdoublegR = { "TMatrixTSym<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMatrixTSparselEdoublegR = { "TMatrixTSparse<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TLinearFitter = { "TLinearFitter" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_Trace = { "Trace" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_Align = { "Align" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_Cluster = { "Cluster" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_RHClass = { "RHClass" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_Event = { "Event" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_calib = { "calib" , 115 , -1 };
G__linked_taginfo G__rootElibdictLN_Calib = { "Calib" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_DHF = { "DHF" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablerootElibdict() {
  G__rootElibdictLN_TClass.tagnum = -1 ;
  G__rootElibdictLN_TBuffer.tagnum = -1 ;
  G__rootElibdictLN_TDirectory.tagnum = -1 ;
  G__rootElibdictLN_TMemberInspector.tagnum = -1 ;
  G__rootElibdictLN_TObject.tagnum = -1 ;
  G__rootElibdictLN_TNamed.tagnum = -1 ;
  G__rootElibdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__rootElibdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__rootElibdictLN_TObjArray.tagnum = -1 ;
  G__rootElibdictLN_TClonesArray.tagnum = -1 ;
  G__rootElibdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__rootElibdictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__rootElibdictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TH1D.tagnum = -1 ;
  G__rootElibdictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__rootElibdictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TFile.tagnum = -1 ;
  G__rootElibdictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TMatrixTSymlEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TMatrixTSparselEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__rootElibdictLN_TLinearFitter.tagnum = -1 ;
  G__rootElibdictLN_Trace.tagnum = -1 ;
  G__rootElibdictLN_Align.tagnum = -1 ;
  G__rootElibdictLN_Cluster.tagnum = -1 ;
  G__rootElibdictLN_RHClass.tagnum = -1 ;
  G__rootElibdictLN_Event.tagnum = -1 ;
  G__rootElibdictLN_calib.tagnum = -1 ;
  G__rootElibdictLN_Calib.tagnum = -1 ;
  G__rootElibdictLN_DHF.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablerootElibdict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TClass);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TDirectory);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TObject);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TH1D);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TFile);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMatrixTSymlEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMatrixTSparselEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMatrixTSparseDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TLinearFitter);
   G__tagtable_setup(G__get_linked_tagnum(&G__rootElibdictLN_Trace),sizeof(Trace),-1,292096,(char*)NULL,G__setup_memvarTrace,G__setup_memfuncTrace);
   G__tagtable_setup(G__get_linked_tagnum(&G__rootElibdictLN_Align),sizeof(Align),-1,324608,(char*)NULL,G__setup_memvarAlign,G__setup_memfuncAlign);
   G__tagtable_setup(G__get_linked_tagnum(&G__rootElibdictLN_Cluster),sizeof(Cluster),-1,292608,(char*)NULL,G__setup_memvarCluster,G__setup_memfuncCluster);
   G__tagtable_setup(G__get_linked_tagnum(&G__rootElibdictLN_RHClass),sizeof(RHClass),-1,292096,(char*)NULL,G__setup_memvarRHClass,G__setup_memfuncRHClass);
   G__tagtable_setup(G__get_linked_tagnum(&G__rootElibdictLN_Event),sizeof(Event),-1,292096,(char*)NULL,G__setup_memvarEvent,G__setup_memfuncEvent);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_calib);
   G__tagtable_setup(G__get_linked_tagnum(&G__rootElibdictLN_Calib),sizeof(Calib),-1,294912,(char*)NULL,G__setup_memvarCalib,G__setup_memfuncCalib);
   G__tagtable_setup(G__get_linked_tagnum(&G__rootElibdictLN_DHF),sizeof(DHF),-1,325120,(char*)NULL,G__setup_memvarDHF,G__setup_memfuncDHF);
}
extern "C" void G__cpp_setuprootElibdict(void) {
  G__check_setup_version(30051515,"G__cpp_setuprootElibdict()");
  G__set_cpp_environmentrootElibdict();
  G__cpp_setup_tagtablerootElibdict();

  G__cpp_setup_inheritancerootElibdict();

  G__cpp_setup_typetablerootElibdict();

  G__cpp_setup_memvarrootElibdict();

  G__cpp_setup_memfuncrootElibdict();
  G__cpp_setup_globalrootElibdict();
  G__cpp_setup_funcrootElibdict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncrootElibdict();
  return;
}
class G__cpp_setup_initrootElibdict {
  public:
    G__cpp_setup_initrootElibdict() { G__add_setup_func("rootElibdict",(G__incsetup)(&G__cpp_setuprootElibdict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initrootElibdict() { G__remove_setup_func("rootElibdict"); }
};
G__cpp_setup_initrootElibdict G__cpp_setup_initializerrootElibdict;

