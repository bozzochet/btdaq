#  $Id: ecal.doc,v 1.1.1.1 2007/11/13 09:56:11 zuccon Exp $
    Classes :
//
class AMSEcalMCHit: public AMSlink{
protected:
 integer  _idsoft;// SSLLFFF (SS->s-layer,LL->f-layer in SS, FFF->fiber in LL)
 AMSPoint _xcoo;
 number _tof;
 number _edep;

public:
 
 AMSEcalMCHit(integer idsoft,AMSPoint xcoo,number edep, number tof) :
 _idsoft(idsoft), _xcoo(xcoo),_edep(edep),_tof(tof){_next=0;};
 AMSEcalMCHit(){_next=0;};
 ~AMSEcalMCHit(){};
 void _printEl(ostream &stream){stream <<"AMSEcalMCHit "<<_idsoft<<" "<<_edep<<endl;}
 void _writeEl();
 void _copyEl(){};
 static void siecalhits(integer idsoft , geant vect[],geant edep, geant tofg);
 AMSEcalMCHit *  next(){return (AMSEcalMCHit*)_next;}
 integer operator < (AMSlink & o)const{
 return _idsoft < ((AMSEcalMCHit*)(&o)) ->_idsoft;}

 integer getid() const {return _idsoft;}
 number getedep() const {return _edep;}
 number gettime() const {return _tof;}
 number getcoo(integer i) {return i>=0 && i<3 ? _xcoo[i]:0;}
// static integer Out(integer);

//#ifdef __DB__
//   friend class AMSEcalMCHitD;
//#endif
};
//----------------------------------------------
class AMSEcalRawEvent: public AMSlink{
private:
  integer _idsoft; //readout cell ID=SSPPC (SS->S-layer,PP->PMcell, C->SubCell in PMcell)
//integer _status; // status (0/1/... -> alive/dead/...) (It is really in AMSlink !!!)
  integer _padc;// Pulse hight (ADC-channels)
public:
  AMSEcalRawEvent(integer idsoft, integer status,  
        integer padc):AMSlink(status,0),_idsoft(idsoft),_padc(padc)
  {};
  ~AMSEcalRawEvent(){};
  AMSEcalRawEvent * next(){return (AMSEcalRawEvent*)_next;}
//
  integer operator < (AMSlink & o)const{
                return _idsoft<((AMSEcalRawEvent*)(&o))->_idsoft;}
//
  integer getid() const {return _idsoft;}
  integer getpadc(){return _padc;}
//
  static void mc_build(int &stat);
  static void validate(int &stat);
//
//-----------------------------------
class AMSEcalHit: public AMSlink{
private:
//integer _status; // status (0/1/... -> alive/dead/...) (It is really in AMSlink !!!)
  integer _proj;   //projection (0->X, 1->Y)
  integer _plane;  //continious numbering of planes through 2 projections(0,...)
  integer _cell;   // numbering in plane(0,...)
  number  _edep;
  number  _coot;   //transv.coord.
  number  _cool;   //long.coord.
  number  _cooz;
public:
  AMSEcalHit(integer status, integer proj, integer plane, integer cell,number edep,
         number coot, number cool, number cooz):AMSlink(status,0),_proj(proj),
	 _plane(plane),_cell(cell),_edep(edep),_coot(coot),_cool(cool),_cooz(cooz){};
  ~AMSEcalHit(){};
  AMSEcalHit * next(){return (AMSEcalHit*)_next;}
//
  integer getproj(){return _proj;}
  integer getplane(){return _plane;}
  integer getcell(){return _cell;}
  number getedep(){return _edep;}
  number getcoot(){return _coot;}
  number getcool(){return _cool;}
  number getcooz(){return _cooz;}
//
  static void build(int &stat);
//


class Ecal1DCluster: public AMSlink{ 
private:
  integer _proj;   //projection (0->X, 1->Y)
  integer _plane;  //continious numbering of planes through 2 projections(0,...)
  number  _Energy3C;  //Corrected Energy MeV (+-1)
  number  _Energy5C;  //Corrected Energy MeV (+-2)
  number  _Energy9C;  //Corrected Energy MeV (+-4)
  number  _EnergyC;   //Corrected Energy MeV  
  number  _SideLeak;  //Side Leak Estimation (MeV)
  number  _DeadLeak;  //Dead PMT Leak Estimation (MeV)
  AMSPoint  _Coo;     // cluster center of gravity coordinates 
  integer _MaxCell;   // Cell with max edep 
  integer _Left;      // most left
  integer _Right;     // most right
  number  _Weight;    // Weight to calculate Coo;
  number _RMS;        //  rms;
  integer _NHits;
  AMSEcalHit *_pHit[2*ecalconst::ECPMSMX]; // pointers to hits
public:
  Ecal1DCluster(integer status, integer proj, integer pl, integer left, integer right, integer max, number en,number en3, number en5, number en9, number leak, number dead,AMSPoint coo, number w, number rms, AMSEcalHit * ptr[]): AMSlink(status,0),_proj(proj), _plane(pl),_Energy3C(en3),_Energy5C(en5),_Energy9C(en9),_EnergyC(en),_SideLeak(leak),_DeadLeak(dead),_Coo(coo),_MaxCell(max),_Left(left),_Right(right),_Weight(w),_RMS(rms){
_NHits=0;
for(int i=_Left;i<=_Right;i++){
 if(ptr && ptr[i])_pHit[_NHits++]=ptr[i];
}
};
  ~Ecal1DCluster(){};
  Ecal1DCluster * next(){return (Ecal1DCluster*)_next;}
//
 uinteger getNHits()const{return _NHits;}
 AMSEcalHit * getphit(uinteger i)const{return i<_NHits?_pHit[i]:0;}
 integer operator < (AMSlink & o)const{
   Ecal1DCluster *p =dynamic_cast<Ecal1DCluster*>(&o);
   if (checkstatus(AMSDBc::USED) && !(o.checkstatus(AMSDBc::USED)))return 1;
   else if(!checkstatus(AMSDBc::USED) && (o.checkstatus(AMSDBc::USED)))return 0;
   else return !p || (_plane<p->_plane);
}
  number getweight()const{return _Weight;}
  integer getproj()const{return _proj;}
  integer getplane()const{return _plane;}
  number getEnergy()const{return _EnergyC;}
  number getec3()const{return _Energy3C;}
  number getec5()const{return _Energy5C;}
  number getec9()const{return _Energy9C;}
  number getsleak()const{return _SideLeak;}
  number getdleak()const{return _DeadLeak;}
  number getrms()const{return _RMS;}
  integer getmaxcell()const {return _MaxCell;}
  AMSPoint getcoo()const {return _Coo;}
//
  static integer build(int stat=0);
  static integer Out(integer);
  number PosError(){return ECREFFKEY.PosError1D;}
  bool Good(){return !(checkstatus(AMSDBc::BAD) || checkstatus(AMSDBc::DELETED) || checkstatus(AMSDBc::JUNK) ||  checkstatus(AMSDBc::USED));}
  number Distance(Ecal1DCluster *p);
  Ecal1DCluster* EnergyMatch(Ecal1DCluster *pmatch, Ecal1DCluster *pbest){
   return (pbest && fabs(_EnergyC-pmatch->_EnergyC)>fabs(_EnergyC-pbest->_EnergyC))?pbest:this;
  }
//
protected:

  void _printEl(ostream &stream){
    int i;
    stream <<"AMSEcalCluster: Proj= "<<_proj<<" plane="<<_plane<<endl;
    stream <<"Status="<<hex<<_status<<"  Edep="<<dec<<_EnergyC<<endl; 
    stream <<"Coord="<<_Coo[0]<<" "<<_Coo[1]<<" "<<_Coo[2]<<endl;
    stream <<dec<<endl<<endl;
  }

void _writeEl();
void _copyEl();
//
#ifdef __WRITEROOT__
 friend class EcalClusterRoot;
#endif
};




