#include <cstdio>
#include <cmath>
#include <cstdlib>


int gethw(int reqtrid,char* nameout);

int main(){

  const short int nsen[2][8][15]={
    //  1     2     3     4     5      6    7     8     9     10    11    12    13    14     15 //side 0
    {{ 10  , 12  , 13  , 14  , 14  ,  15 , 15  , 15  , 15  ,  15 ,  14 ,  14 ,  13 ,  12 ,   10}, //layer1
     {  7  , 14  ,  9  , 11  , 11  ,  12 , 12  ,  0  , 12  ,  12 ,  11 ,  11 ,   9 ,   0 ,    0}, //layer2
     {  0  , 14  ,  9  , 11  , 11  ,  12 , 12  ,  0  , 12  ,  12 ,  11 ,  11 ,   9 ,   0 ,    0}, //layer3
     {  0  ,  0  ,  9  , 11  , 11  ,  12 , 12  ,  0  , 12  ,  12 ,  11 ,  11 ,   9 ,   0 ,    0}, //layer4
     {  0  ,  0  ,  9  , 11  , 11  ,  12 , 12  ,  0  , 12  ,  12 ,  11 ,  11 ,   9 ,   0 ,    0}, //layer5
     {  0  , 14  ,  9  , 11  , 11  ,  12 , 12  ,  0  , 12  ,  12 ,  11 ,  11 ,   9 ,   0 ,    0}, //layer6
     {  7  , 14  ,  9  , 11  , 11  ,  12 , 12  ,  0  , 12  ,  12 ,  11 ,  11 ,   9 ,   0 ,    0}, //layer7
     { 10  , 12  , 13  , 14  , 14  ,  15 , 15  , 15  , 15  ,  15 ,  14 ,  14 ,  13 ,  12 ,   10}, //layer8
    },
    //  1     2     3     4     5      6    7     8     9     10    11    12    13    14     15 //side 1
    {{ 10  , 11  , 13  , 14  , 15  ,  15 , 15  , 15  , 15  ,  15 ,  15 ,  14 ,  13 ,  11 ,   10}, //layer1
     {  0  ,  0  ,  9  , 10  , 12  ,  12 , 12  ,  0  , 12  ,  12 ,  12 ,  10 ,   9 ,  14 ,    7}, //layer2
     {  0  ,  0  ,  9  , 10  , 12  ,  12 , 12  ,  0  , 12  ,  12 ,  12 ,  10 ,   9 ,  14 ,    0}, //layer3
     {  0  ,  0  ,  9  , 10  , 12  ,  12 , 12  ,  0  , 12  ,  12 ,  12 ,  10 ,   9 ,   0 ,    0}, //layer4
       {  0  ,  0  ,  9  , 10  , 12  ,  12 , 12  ,  0  , 12  ,  12 ,  12 ,  10 ,   9 ,   0 ,    0}, //layer5
     {  0  ,  0  ,  9  , 10  , 12  ,  12 , 12  ,  0  , 12  ,  12 ,  12 ,  10 ,   9 ,  14 ,    0}, //layer6
     {  0  ,  0  ,  9  , 10  , 12  ,  12 , 12  ,  0  , 12  ,  12 ,  12 ,  10 ,   9 ,  14 ,    7}, //layer7
     { 10  , 11  , 13  , 14  , 15  ,  15 , 15  , 15  , 15  ,  15 ,  15 ,  14 ,  13 ,  11 ,   10}, //layer8
    }

  };
  int tkid;
  int side=0;
  char nameout[10];
  printf("{{\n");
  for (side=0;side<2;side++){
    for (int layer=0;layer<8;layer++){
      printf("{ ");
      for (int slot=0;slot<15;slot++){
	tkid= -(1-2*side)*((layer+1)*100+slot+1);
	if(nsen[side][layer][slot]>0)   
	  printf(" %4d,",gethw(tkid,nameout));
	//printf("%4d  ,",tkid);
	else 
	  printf("    0,");
	//printf("  %4d  ,",tkid);
      }
      printf(" },\n");
      
    }
    printf("},\n");
  }
  printf("};\n");

  return 0;

}  

int gethw(int reqtrid,char* nameout){
  char Side[8][24][10]={    // Tracker Side:  (M-Side, P-side)
  {"P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P"},
  {"M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M"},
  {"P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P"},
  {"M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M"},
  {"P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P"},
  {"M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M"},
  {"P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P"},
  {"M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M"},
};


int Layer[8][24]={    // Layer Number: 1 to 8
    {1, 1, 2, 4, 1, 3, 1, 3, 2, 4, 1, 1, 1, 1, 2, 4, 1, 3, 4, 3, 2, 4, 2, 3},
    {2, 3, 2, 2, 4, 3, 1, 3, 2, 4, 1, 1, 1, 1, 2, 4, 1, 3, 4, 3, 2, 4, 2, 3},
    {2, 3, 2, 2, 4, 3, 1, 3, 2, 4, 1, 1, 1, 1, 2, 4, 1, 3, 4, 3, 2, 4, 2, 3},
    {1, 1, 2, 4, 1, 3, 1, 3, 2, 4, 1, 1, 1, 1, 2, 4, 1, 3, 4, 3, 2, 4, 2, 3},
    {8, 8, 7, 5, 8, 6, 8, 6, 7, 5, 8, 8, 7, 6, 7, 5, 5, 6, 8, 6, 7, 5, 8, 8},
    {8, 8, 7, 5, 8, 6, 5, 6, 7, 7, 7, 6, 7, 6, 7, 5, 5, 6, 8, 6, 7, 5, 8, 8},
    {8, 8, 7, 5, 8, 6, 5, 6, 7, 7, 7, 6, 7, 6, 7, 5, 5, 6, 8, 6, 7, 5, 8, 8},
    {8, 8, 7, 5, 8, 6, 8, 6, 7, 5, 8, 8, 7, 6, 7, 5, 5, 6, 8, 6, 7, 5, 8, 8}
  };


int Slot[8][24]={    // Slot Number: 1 to 15
    {13, 15,  9,  9, 14, 13,  8,  9, 13, 13,  7,  9, 10, 12, 10, 10, 11, 12, 11, 10, 12, 12, 11, 11},
    { 7,  7,  1,  2,  7,  6,  2,  2,  6,  6,  3,  1,  6,  4,  3,  3,  5,  5,  4,  3,  5,  5,  4,  4},
    { 7,  7,  1,  2,  7,  6,  2,  2,  6,  6,  3,  1,  6,  4,  3,  3,  5,  5,  4,  3,  5,  5,  4,  4},
    {13, 15,  9,  9, 14, 13,  8,  9, 13, 13,  7,  9, 10, 12, 10, 10, 11, 12, 11, 10, 12, 12, 11, 11},
    { 7,  9, 13, 13,  8,  9, 14, 13,  9,  9, 13, 15, 11, 11, 12, 12, 11, 10, 11, 12, 10, 10, 10, 12},
    { 3,  1,  6,  6,  2,  2,  7,  6,  1,  2,  7,  7,  4,  4,  5,  5,  4,  3,  5,  5,  3,  3,  6,  4},
    { 3,  1,  6,  6,  2,  2,  7,  6,  1,  2,  7,  7,  4,  4,  5,  5,  4,  3,  5,  5,  3,  3,  6,  4},
    { 7,  9, 13, 13,  8,  9, 14, 13,  9,  9, 13, 15, 11, 11, 12, 12, 11, 10, 11, 12, 10, 10, 10, 12}, 
  };



  char Name[8][24][10]={ 
    {"L13AO071", "L10AO149", "L12AJ021", "L12AJ018", "L11AO154", "L09GI011", "L15AP109", "L12SH169", 
     "L09GI006", "L09AI075", "L15AO174", "L15AO177", "L15AN113", "L14AO156", "L12AH057", "L12AH061",
     "L15AO163", "L10PI001", "L12AI015", "L12AJ033", "L10PI005", "L10AI079", "L12AI001", "L12AI012"},
    
    {"L12AI004", "L12AJ038", "L07PI002", "L14AI031", "L12AI048", "L12AJ055", "L12SO181", "L14AI032",
     "L12AH024", "L12AH060", "L13AO073", "L10AO151", "L15SO180", "L14AO123", "L09GI003", "L09GI005",
     "L14AO125", "L11AI140", "L11GI017", "L09AI139", "L11GI008", "L11AI082", "L11GI004", "L11AI127"},

    {"L12AI006", "L12SI167", "L07PI004", "L14AI042", "L12AI063", "L12AH058", "L11AO153", "L14AI044",
     "L12AJ051", "L12AJ019", "L13AO025", "L10AO150", "L15AP099", "L14AO158", "L09GI013", "L09AI077",
     "L15AO115", "L12AI016", "L10GI015", "L09GI002", "L12AI003", "L12AI065", "L10GI014", "L10PI008"},

    {"L13AO114", "L10AO145", "L12AH029", "L12AH059", "L12AO107", "L09SI164", "L15AO173", "L12AJ054",
     "L09GI010", "L09AI076", "L15AN101", "L15AN100", "L15AO093", "L14AO160", "L12AI005", "L12AI064",
     "L14AO159", "L11AI126", "L11AI083", "L12SI182", "L11GI016", "L11AI081", "L11GI009", "L11SI176"},
 
    {"L15AO096", "L15AO162", "L09AI091", "L09AI138", "L15AN117", "L12AJ023", "L11AO155", "L09AI135",
     "L12AH045", "L12AH035", "L13AO072", "L10AO147", "L12AI133", "L12AH062", "L10PI011", "L10PI009",
     "L12AI132", "L12AH037", "L15AO116", "L10AI080", "L12AJ047", "L12AJ022", "L15AP112", "L14AO121"},

    {"L13AO026", "L10AO144", "L12AJ020", "L12AJ034", "L12AO105", "L14AI041", "L12AI049", "L12AH030", 
     "L07PI003", "L14AI040", "L12AI007", "L12AI067", "L11AI128", "L11AI084", "L11AI088", "L11AI085", 
     "L11AI087", "L09AI089", "L14AO120", "L11GI001", "L09AI103", "L09AI090", "L15AO173", "L14AO119"},
 
    {"L13AO111", "L10AO146", "L12AH046", "L12AH036", "L11SO165", "L14AI043", "L12AI131", "L12AJ052", 
     "L07PI006", "L14AI039", "L12AI068", "L12SI171", "L10PI007", "L10AI078", "L12AI050", "L12AI066", 
     "L10PI013", "L09PI012", "L15SO178", "L12SI168", "L09AI102", "L09AI136", "L15AN118", "L14AO157"},

    {"L11AP098", "L15AP110", "L09PI010", "L09AI092", "L15AO097", "L12AH028", "L12AO106", "L09GI012", 
     "L12AJ056", "L12AJ053", "L13AO074", "L10AO148", "L11AI134", "L11AI141", "L11AI142", "L11AI143", 
     "L11AI086", "L12SI170", "L14AO122", "L11AI104", "L12AI130", "L12AI017", "L15AO095", "L14AO124"}
    
     };



int PWG[8][24]={   // Power group number
    {1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3},
    {1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3},
    {1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3},    
    {1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3},
    {1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3},
    {1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3},
    {1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3},
    {1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3}
  };



  char PWG2[8][24][10]={ 
    {"1A", "1B", "3A", "3B", "2A", "2B", "2A", "2B", "3A", "3B", "1A", "1B", "1A", "1B", "3A", "3B", "2A", "2B", "2A", "2B", "3A", "3B", "1A", "1B"},
    {"1A", "1B", "3A", "3B", "2A", "2B", "2A", "2B", "3A", "3B", "1A", "1B", "1A", "1B", "3A", "3B", "2A", "2B", "2A", "2B", "3A", "3B", "1A", "1B"},//16
    {"1A", "1B", "3A", "3B", "2A", "2B", "2A", "2B", "3A", "3B", "1A", "1B", "1A", "1B", "3A", "3B", "2A", "2B", "2A", "2B", "3A", "3B", "1A", "1B"},
    {"1A", "1B", "3A", "3B", "2A", "2B", "2A", "2B", "3A", "3B", "1A", "1B", "1A", "1B", "3A", "3B", "2A", "2B", "2A", "2B", "3A", "3B", "1A", "1B"},
    {"1A", "1B", "3A", "3B", "2A", "2B", "2A", "2B", "3A", "3B", "1A", "1B", "1A", "1B", "3A", "3B", "2A", "2B", "2A", "2B", "3A", "3B", "1A", "1B"},//0
    {"1A", "1B", "3A", "3B", "2A", "2B", "2A", "2B", "3A", "3B", "1A", "1B", "1A", "1B", "3A", "3B", "2A", "2B", "2A", "2B", "3A", "3B", "1A", "1B"},
    {"1A", "1B", "3A", "3B", "2A", "2B", "2A", "2B", "3A", "3B", "1A", "1B", "1A", "1B", "3A", "3B", "2A", "2B", "2A", "2B", "3A", "3B", "1A", "1B"},
    {"1A", "1B", "3A", "3B", "2A", "2B", "2A", "2B", "3A", "3B", "1A", "1B", "1A", "1B", "3A", "3B", "2A", "2B", "2A", "2B", "3A", "3B", "1A", "1B"}
  };



  char TDR2[8][24][10]={ 
    {"1A", "1B", "19A", "19B", "2A", "2B", "18A", "18B", "3A", "3B", "17A", "17B", "7A", "7B", "13A", "13B", "8A", "8B", "12A", "12B", "9A", "9B", "11A", "11B"},
    {"1A", "1B", "19A", "19B", "2A", "2B", "18A", "18B", "3A", "3B", "17A", "17B", "7A", "7B", "13A", "13B", "8A", "8B", "12A", "12B", "9A", "9B", "11A", "11B"},
    {"1A", "1B", "19A", "19B", "2A", "2B", "18A", "18B", "3A", "3B", "17A", "17B", "7A", "7B", "13A", "13B", "8A", "8B", "12A", "12B", "9A", "9B", "11A", "11B"},
    {"1A", "1B", "19A", "19B", "2A", "2B", "18A", "18B", "3A", "3B", "17A", "17B", "7A", "7B", "13A", "13B", "8A", "8B", "12A", "12B", "9A", "9B", "11A", "11B"},
    {"1A", "1B", "19A", "19B", "2A", "2B", "18A", "18B", "3A", "3B", "17A", "17B", "7A", "7B", "13A", "13B", "8A", "8B", "12A", "12B", "9A", "9B", "11A", "11B"},
    {"1A", "1B", "19A", "19B", "2A", "2B", "18A", "18B", "3A", "3B", "17A", "17B", "7A", "7B", "13A", "13B", "8A", "8B", "12A", "12B", "9A", "9B", "11A", "11B"},
    {"1A", "1B", "19A", "19B", "2A", "2B", "18A", "18B", "3A", "3B", "17A", "17B", "7A", "7B", "13A", "13B", "8A", "8B", "12A", "12B", "9A", "9B", "11A", "11B"},  
    {"1A", "1B", "19A", "19B", "2A", "2B", "18A", "18B", "3A", "3B", "17A", "17B", "7A", "7B", "13A", "13B", "8A", "8B", "12A", "12B", "9A", "9B", "11A", "11B"}
  };



int XP[8][24]={  // X-Parity (XP = MP) [MP= -1(P-side), +1(M-Side)]
  {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
  {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
  {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
  {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
};


int YP[8][24]={  // Y-Parity (YP = P*MP) [P = 1-2*(Layer%2)]
    { 1, 1,-1,-1, 1, 1, 1, 1,-1,-1, 1, 1, 1, 1,-1,-1, 1, 1,-1, 1,-1,-1,-1, 1},
    { 1,-1, 1, 1, 1,-1,-1,-1, 1, 1,-1,-1,-1,-1, 1, 1,-1,-1, 1,-1, 1, 1, 1,-1},
    {-1, 1,-1,-1,-1, 1, 1, 1,-1,-1, 1, 1, 1, 1,-1,-1, 1, 1,-1, 1,-1,-1,-1, 1},
    {-1,-1, 1, 1,-1,-1,-1,-1, 1, 1,-1,-1,-1,-1, 1, 1,-1,-1, 1,-1, 1, 1, 1,-1},
    {-1,-1, 1, 1,-1,-1,-1,-1, 1, 1,-1,-1, 1,-1, 1, 1, 1,-1,-1,-1, 1, 1,-1,-1},
    { 1, 1,-1,-1, 1, 1,-1, 1,-1,-1,-1, 1,-1, 1,-1,-1,-1, 1, 1, 1,-1,-1, 1, 1},
    {-1,-1, 1, 1,-1,-1, 1,-1, 1, 1, 1,-1, 1,-1, 1, 1, 1,-1,-1,-1, 1, 1,-1,-1},
    { 1, 1,-1,-1, 1, 1, 1, 1,-1,-1, 1, 1,-1, 1,-1,-1,-1, 1, 1, 1,-1,-1, 1, 1},
};


 for (int oct=0;oct<8;oct++)
   for (int tdr=0;tdr<24;tdr++){
     
     int hwid=(oct+1)*100+tdr;
     int myslot;
     if(oct%2==0) myslot=16-Slot[oct][tdr];
     else myslot=-Slot[oct][tdr];
     int trid=abs(myslot)/myslot*(Layer[oct][tdr]*100+abs(myslot));
     if(trid==reqtrid) {
//        sprintf(nameout,"%s",Name[oct][tdr]);
//        return nameout;
//       sprintf(nameout,"%s",Name[oct][tdr]);
       return hwid;
     }
   }
     
 return 0;
}
