### Architecture ###
ARCH     = $(shell uname)

### Compilers ###
FC       = g77
CXX      = g++
LD       = g++

### Documentation ###
ifeq ($(DOXYGEN),)
DOXYGEN  = doxygen
endif

### ROOT settings ###
CINT      = $(ROOTSYS)/bin/rootcint
ROOTCFG   = $(ROOTSYS)/bin/root-config
CPPFLAGS += -I$(ROOTSYS)/include
ROOTLIBS  = $(shell $(ROOTCFG) --libs) -lGeom -lRGL -lGed -lGui

### C++ compiler flags ###
ifeq ($(ARCH), Darwin)
CPPFLAGS  += -D__DARWIN__
FC=gfortran
FLIB=-lgfortran
else
CPPFLAGS  += -D__LINUXGNU__
FC=g77
FLIB=-lg2c
endif



CXXFLAGS =   -g -Wno-deprecated -fPIC -march=i686  $(shell $(ROOTCFG) --auxcflags)  $(CPPFLAGS) 

-include Makefile.local

### LD flags ###
ifeq ($(ARCH), Darwin)
SOFLAGS  = -dynamiclib -undefined dynamic_lookup
else
SOFLAGS  = -shared
endif

# BASIC RULES
$(OBJ)/%.o : %.C 
	@echo Compiling  $< ...
	@if ! [ -d $(OBJ)/tmp ] ; then mkdir -p $(OBJ)/tmp; fi
	$(CXX) $(CXXFLAGS) -c $< -o $@  

$(OBJ)/%.o : $(SRC)/%.C 
	@echo Compiling  $< ...
	@if ! [ -d $(OBJ)/tmp ] ; then mkdir -p $(OBJ)/tmp; fi
	$(CXX) $(CXXFLAGS) -c $< -o $@  

$(OBJ)/%.o : $(SRC)/%.F
	@echo Compiling  $< ...
	@if ! [ -d $(OBJ)/tmp ] ; then mkdir -p $(OBJ)/tmp; fi
	@$(FC) $(FFLAGS) -c $< -o $@  



$(DEP)/%.d : $(SRC)/%.C
	@echo "Generating $@ ..."
	@if ! [ -d $(DEP) ] ; then mkdir -p $(DEP); fi
	@$(CXX) $(CPPFLAGS) -MM $< -MT $(OBJ)/$*.o -MF $@

$(DEP)/%.d : %.C
	@echo "Generating $@ ..."
	@if ! [ -d $(DEP) ] ; then mkdir -p $(DEP); fi
	@$(CXX) $(CPPFLAGS) -MM $< -MT $(OBJ)/$*.o -MF $@
