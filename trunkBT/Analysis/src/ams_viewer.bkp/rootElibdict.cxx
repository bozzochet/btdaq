//
// File generated by rootcint at Wed Jan 24 16:34:36 2018

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME rootElibdict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "rootElibdict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void Cluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Cluster(void *p = 0);
   static void *newArray_Cluster(Long_t size, void *p);
   static void delete_Cluster(void *p);
   static void deleteArray_Cluster(void *p);
   static void destruct_Cluster(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Cluster*)
   {
      ::Cluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Cluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Cluster", ::Cluster::Class_Version(), "./Cluster.hh", 11,
                  typeid(::Cluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Cluster::Dictionary, isa_proxy, 4,
                  sizeof(::Cluster) );
      instance.SetNew(&new_Cluster);
      instance.SetNewArray(&newArray_Cluster);
      instance.SetDelete(&delete_Cluster);
      instance.SetDeleteArray(&deleteArray_Cluster);
      instance.SetDestructor(&destruct_Cluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Cluster*)
   {
      return GenerateInitInstanceLocal((::Cluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Cluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void Event_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Event(void *p = 0);
   static void *newArray_Event(Long_t size, void *p);
   static void delete_Event(void *p);
   static void deleteArray_Event(void *p);
   static void destruct_Event(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Event*)
   {
      ::Event *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Event >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Event", ::Event::Class_Version(), "./Event.hh", 17,
                  typeid(::Event), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Event::Dictionary, isa_proxy, 4,
                  sizeof(::Event) );
      instance.SetNew(&new_Event);
      instance.SetNewArray(&newArray_Event);
      instance.SetDelete(&delete_Event);
      instance.SetDeleteArray(&deleteArray_Event);
      instance.SetDestructor(&destruct_Event);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Event*)
   {
      return GenerateInitInstanceLocal((::Event*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Event*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void RHClass_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_RHClass(void *p = 0);
   static void *newArray_RHClass(Long_t size, void *p);
   static void delete_RHClass(void *p);
   static void deleteArray_RHClass(void *p);
   static void destruct_RHClass(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::RHClass*)
   {
      ::RHClass *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::RHClass >(0);
      static ::ROOT::TGenericClassInfo 
         instance("RHClass", ::RHClass::Class_Version(), "./Event.hh", 73,
                  typeid(::RHClass), ::ROOT::DefineBehavior(ptr, ptr),
                  &::RHClass::Dictionary, isa_proxy, 4,
                  sizeof(::RHClass) );
      instance.SetNew(&new_RHClass);
      instance.SetNewArray(&newArray_RHClass);
      instance.SetDelete(&delete_RHClass);
      instance.SetDeleteArray(&deleteArray_RHClass);
      instance.SetDestructor(&destruct_RHClass);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::RHClass*)
   {
      return GenerateInitInstanceLocal((::RHClass*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RHClass*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr Cluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Cluster::Class_Name()
{
   return "Cluster";
}

//______________________________________________________________________________
const char *Cluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Cluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Cluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Cluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Cluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Cluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Cluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Cluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr Event::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Event::Class_Name()
{
   return "Event";
}

//______________________________________________________________________________
const char *Event::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Event*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Event::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Event*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Event::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Event*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Event::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Event*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr RHClass::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *RHClass::Class_Name()
{
   return "RHClass";
}

//______________________________________________________________________________
const char *RHClass::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RHClass*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RHClass::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RHClass*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RHClass::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RHClass*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RHClass::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RHClass*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void Cluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class Cluster.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Cluster::Class(),this);
   } else {
      R__b.WriteClassBuffer(Cluster::Class(),this);
   }
}

//______________________________________________________________________________
void Cluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Cluster.
      TClass *R__cl = ::Cluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "address", &address);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "length", &length);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Signal[128]", Signal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Noise[128]", Noise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Status[128]", Status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ladder", &ladder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "side", &side);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bad", &bad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "golden", &golden);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "snratio", &snratio);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CNstatus", &CNstatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "powbits", &powbits);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Cluster(void *p) {
      return  p ? new(p) ::Cluster : new ::Cluster;
   }
   static void *newArray_Cluster(Long_t nElements, void *p) {
      return p ? new(p) ::Cluster[nElements] : new ::Cluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_Cluster(void *p) {
      delete ((::Cluster*)p);
   }
   static void deleteArray_Cluster(void *p) {
      delete [] ((::Cluster*)p);
   }
   static void destruct_Cluster(void *p) {
      typedef ::Cluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Cluster

//______________________________________________________________________________
void Event::Streamer(TBuffer &R__b)
{
   // Stream an object of class Event.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Event::Class(),this);
   } else {
      R__b.WriteClassBuffer(Event::Class(),this);
   }
}

//______________________________________________________________________________
void Event::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Event.
      TClass *R__cl = ::Event::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Evtnum", &Evtnum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JINJStatus", &JINJStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JINFStatus[1]", JINFStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TDRStatus[24]", TDRStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CNoise[24][16]", CNoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NClus[24][2]", NClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NClusTot", &NClusTot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "notgood", &notgood);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Cls", &Cls);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rawtdrnum", &rawtdrnum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Signal[8][1024]", Signal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ReadTDR[24]", ReadTDR);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Event(void *p) {
      return  p ? new(p) ::Event : new ::Event;
   }
   static void *newArray_Event(Long_t nElements, void *p) {
      return p ? new(p) ::Event[nElements] : new ::Event[nElements];
   }
   // Wrapper around operator delete
   static void delete_Event(void *p) {
      delete ((::Event*)p);
   }
   static void deleteArray_Event(void *p) {
      delete [] ((::Event*)p);
   }
   static void destruct_Event(void *p) {
      typedef ::Event current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Event

//______________________________________________________________________________
void RHClass::Streamer(TBuffer &R__b)
{
   // Stream an object of class RHClass.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(RHClass::Class(),this);
   } else {
      R__b.WriteClassBuffer(RHClass::Class(),this);
   }
}

//______________________________________________________________________________
void RHClass::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class RHClass.
      TClass *R__cl = ::RHClass::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Run", &Run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "date[30]", date);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nJinf", &nJinf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JinfMap[1]", JinfMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntdrRaw", &ntdrRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdrRawMap[24]", tdrRawMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntdrCmp", &ntdrCmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdrCmpMap[24]", tdrCmpMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CNMean[24][16]", CNMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CNSigma[24][16]", CNSigma);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_RHClass(void *p) {
      return  p ? new(p) ::RHClass : new ::RHClass;
   }
   static void *newArray_RHClass(Long_t nElements, void *p) {
      return p ? new(p) ::RHClass[nElements] : new ::RHClass[nElements];
   }
   // Wrapper around operator delete
   static void delete_RHClass(void *p) {
      delete ((::RHClass*)p);
   }
   static void deleteArray_RHClass(void *p) {
      delete [] ((::RHClass*)p);
   }
   static void destruct_RHClass(void *p) {
      typedef ::RHClass current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::RHClass

/********************************************************
* rootElibdict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablerootElibdict();

extern "C" void G__set_cpp_environmentrootElibdict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("Cluster.hh");
  G__add_compiledheader("Event.hh");
  G__cpp_reset_tagtablerootElibdict();
}
#include <new>
extern "C" int G__cpp_dllrevrootElibdict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Cluster */
static int G__rootElibdict_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Cluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Cluster[n];
     } else {
       p = new((void*) gvp) Cluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Cluster;
     } else {
       p = new((void*) gvp) Cluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_Cluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Cluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Cluster(*(Cluster*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Cluster(*(Cluster*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_Cluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 11:
      ((Cluster*) G__getstructoffset())->Build(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (float*) G__int(libp->para[5])
, (int*) G__int(libp->para[6]), (int) G__int(libp->para[7])
, (int) G__int(libp->para[8]), (int) G__int(libp->para[9])
, (int) G__int(libp->para[10]));
      G__setnull(result7);
      break;
   case 10:
      ((Cluster*) G__getstructoffset())->Build(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (float*) G__int(libp->para[5])
, (int*) G__int(libp->para[6]), (int) G__int(libp->para[7])
, (int) G__int(libp->para[8]), (int) G__int(libp->para[9]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Cluster*) G__getstructoffset())->GetSeed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Cluster*) G__getstructoffset())->GetSeedAdd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetSeedVal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetSeedSN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetTotNoise());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Cluster*) G__getstructoffset())->GetLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetCoG());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetTotSig());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetTotSN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetEta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Cluster*) G__getstructoffset())->GetEtaRaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Cluster*) G__getstructoffset())->GoldRegion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((Cluster*) G__getstructoffset())->GetLenght((float) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((Cluster*) G__getstructoffset())->GetLenght());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Cluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Cluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Cluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Cluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_168_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Cluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Cluster G__TCluster;
static int G__rootElibdict_168_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Cluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Cluster*) (soff+(sizeof(Cluster)*i)))->~G__TCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Cluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Cluster*) (soff))->~G__TCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rootElibdict_168_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Cluster* dest = (Cluster*) G__getstructoffset();
   *dest = *(Cluster*) libp->para[0].ref;
   const Cluster& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Event */
static int G__rootElibdict_193_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Event* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Event((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Event((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Event[n];
       } else {
         p = new((void*) gvp) Event[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Event;
       } else {
         p = new((void*) gvp) Event;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_Event));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_193_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_193_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Event*) G__getstructoffset())->AddCluster((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_193_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Event*) G__getstructoffset())->GetCluster((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_193_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->NGoldenClus((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_193_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Event::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_193_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Event::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_193_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Event::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_193_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Event::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_193_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_193_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Event::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_193_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Event::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_193_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Event::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_193_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Event::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__rootElibdict_193_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Event* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Event(*(Event*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_Event));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Event G__TEvent;
static int G__rootElibdict_193_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Event*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Event*) (soff+(sizeof(Event)*i)))->~G__TEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Event*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Event*) (soff))->~G__TEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rootElibdict_193_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Event* dest = (Event*) G__getstructoffset();
   *dest = *(Event*) libp->para[0].ref;
   const Event& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RHClass */
static int G__rootElibdict_194_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RHClass* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RHClass[n];
     } else {
       p = new((void*) gvp) RHClass[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RHClass;
     } else {
       p = new((void*) gvp) RHClass;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_RHClass));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_194_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RHClass*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_194_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) RHClass::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_194_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RHClass::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_194_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) RHClass::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_194_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RHClass::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_194_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RHClass*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_194_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RHClass::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_194_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RHClass::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_194_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RHClass::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootElibdict_194_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RHClass::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__rootElibdict_194_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RHClass* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RHClass(*(RHClass*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootElibdictLN_RHClass));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RHClass G__TRHClass;
static int G__rootElibdict_194_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RHClass*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RHClass*) (soff+(sizeof(RHClass)*i)))->~G__TRHClass();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RHClass*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RHClass*) (soff))->~G__TRHClass();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rootElibdict_194_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RHClass* dest = (RHClass*) G__getstructoffset();
   *dest = *(RHClass*) libp->para[0].ref;
   const RHClass& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Cluster */

/* Event */

/* RHClass */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncrootElibdict {
 public:
  G__Sizep2memfuncrootElibdict(): p(&G__Sizep2memfuncrootElibdict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncrootElibdict::*p)();
};

size_t G__get_sizep2memfuncrootElibdict()
{
  G__Sizep2memfuncrootElibdict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancerootElibdict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__rootElibdictLN_Cluster))) {
     Cluster *G__Lderived;
     G__Lderived=(Cluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__rootElibdictLN_Cluster),G__get_linked_tagnum(&G__rootElibdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__rootElibdictLN_Event))) {
     Event *G__Lderived;
     G__Lderived=(Event*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__rootElibdictLN_Event),G__get_linked_tagnum(&G__rootElibdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__rootElibdictLN_RHClass))) {
     RHClass *G__Lderived;
     G__Lderived=(RHClass*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__rootElibdictLN_RHClass),G__get_linked_tagnum(&G__rootElibdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablerootElibdict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__rootElibdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__rootElibdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootElibdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__rootElibdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootElibdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__rootElibdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__rootElibdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootElibdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__rootElibdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootElibdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__rootElibdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__rootElibdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__rootElibdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__rootElibdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__rootElibdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Cluster */
static void G__setup_memvarCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootElibdictLN_Cluster));
   { Cluster *p; p=(Cluster*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->address)-(long)(p)),105,0,0,-1,-1,-1,1,"address=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->length)-(long)(p)),105,0,0,-1,-1,-1,1,"length=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Signal)-(long)(p)),102,0,0,-1,-1,-1,1,"Signal[128]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Noise)-(long)(p)),102,0,0,-1,-1,-1,1,"Noise[128]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Status)-(long)(p)),105,0,0,-1,-1,-1,1,"Status[128]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ladder)-(long)(p)),105,0,0,-1,-1,-1,1,"ladder=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->side)-(long)(p)),105,0,0,-1,-1,-1,1,"side=",0,"0 S / 1 K");
   G__memvar_setup((void*)((long)(&p->bad)-(long)(p)),105,0,0,-1,-1,-1,1,"bad=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->golden)-(long)(p)),105,0,0,-1,-1,-1,1,"golden=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->snratio)-(long)(p)),105,0,0,-1,-1,-1,1,"snratio=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CNstatus)-(long)(p)),105,0,0,-1,-1,-1,1,"CNstatus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->powbits)-(long)(p)),105,0,0,-1,-1,-1,1,"powbits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Event */
static void G__setup_memvarEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootElibdictLN_Event));
   { Event *p; p=(Event*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Evtnum)-(long)(p)),105,0,0,-1,-1,-1,1,"Evtnum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->JINJStatus)-(long)(p)),105,0,0,-1,-1,-1,1,"JINJStatus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->JINFStatus)-(long)(p)),105,0,0,-1,-1,-1,1,"JINFStatus[1]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TDRStatus)-(long)(p)),105,0,0,-1,-1,-1,1,"TDRStatus[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CNoise)-(long)(p)),100,0,0,-1,-1,-1,1,"CNoise[24][16]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->NClus)-(long)(p)),105,0,0,-1,-1,-1,1,"NClus[24][2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->NClusTot)-(long)(p)),105,0,0,-1,-1,-1,1,"NClusTot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->notgood)-(long)(p)),105,0,0,-1,-1,-1,1,"notgood=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Cls)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TClonesArray),-1,-1,1,"Cls=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rawtdrnum)-(long)(p)),105,0,0,-1,-1,-1,1,"rawtdrnum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Signal)-(long)(p)),115,0,0,-1,-1,-1,1,"Signal[8][1024]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ReadTDR)-(long)(p)),115,0,0,-1,-1,-1,1,"ReadTDR[24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RHClass */
static void G__setup_memvarRHClass(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootElibdictLN_RHClass));
   { RHClass *p; p=(RHClass*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Run)-(long)(p)),105,0,0,-1,-1,-1,1,"Run=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->date)-(long)(p)),99,0,0,-1,-1,-1,1,"date[30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nJinf)-(long)(p)),105,0,0,-1,-1,-1,1,"nJinf=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->JinfMap)-(long)(p)),105,0,0,-1,-1,-1,1,"JinfMap[1]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntdrRaw)-(long)(p)),105,0,0,-1,-1,-1,1,"ntdrRaw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tdrRawMap)-(long)(p)),105,0,0,-1,-1,-1,1,"tdrRawMap[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntdrCmp)-(long)(p)),105,0,0,-1,-1,-1,1,"ntdrCmp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tdrCmpMap)-(long)(p)),105,0,0,-1,-1,-1,1,"tdrCmpMap[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CNMean)-(long)(p)),100,0,0,-1,-1,-1,1,"CNMean[24][16]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CNSigma)-(long)(p)),100,0,0,-1,-1,-1,1,"CNSigma[24][16]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__rootElibdictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarrootElibdict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncCluster(void) {
   /* Cluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootElibdictLN_Cluster));
   G__memfunc_setup("GetCSignal",961,(G__InterfaceMethod) NULL, 102, -1, -1, 0, 1, 1, 4, 0, "i - - 0 - aa", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Cluster",738,G__rootElibdict_168_0_2, 105, G__get_linked_tagnum(&G__rootElibdictLN_Cluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Cluster",738,G__rootElibdict_168_0_3, 105, G__get_linked_tagnum(&G__rootElibdictLN_Cluster), -1, 0, 1, 1, 1, 0, "u 'Cluster' - 1 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Build",496,G__rootElibdict_168_0_4, 121, -1, -1, 0, 11, 1, 1, 0, 
"i - - 0 - lad i - - 0 - sid "
"i - - 0 - add i - - 0 - len "
"F - - 0 - sig F - - 0 - noi "
"I - - 0 - stat i - - 0 - Sig2NoiRatio "
"i - - 0 - CNStatus i - - 0 - PowBits "
"i - - 0 '0' badin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__rootElibdict_168_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeed",673,G__rootElibdict_168_0_6, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeedAdd",938,G__rootElibdict_168_0_7, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeedVal",964,G__rootElibdict_168_0_8, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeedSN",834,G__rootElibdict_168_0_9, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTotNoise",1109,G__rootElibdict_168_0_10, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLength",898,G__rootElibdict_168_0_11, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCoG",537,G__rootElibdict_168_0_12, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTotSig",890,G__rootElibdict_168_0_13, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTotSN",760,G__rootElibdict_168_0_14, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEta",570,G__rootElibdict_168_0_15, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEtaRaw",868,G__rootElibdict_168_0_16, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__rootElibdict_168_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GoldRegion",1002,G__rootElibdict_168_0_18, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLenght",898,G__rootElibdict_168_0_19, 105, -1, -1, 0, 1, 1, 1, 0, "f - - 0 '1.' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__rootElibdict_168_0_20, 85, G__get_linked_tagnum(&G__rootElibdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Cluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__rootElibdict_168_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__rootElibdict_168_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Cluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__rootElibdict_168_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Cluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__rootElibdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__rootElibdict_168_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__rootElibdict_168_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__rootElibdict_168_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Cluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__rootElibdict_168_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__rootElibdict_168_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Cluster::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Cluster", 864, G__rootElibdict_168_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rootElibdict_168_0_33, (int) ('u'), G__get_linked_tagnum(&G__rootElibdictLN_Cluster), -1, 1, 1, 1, 1, 0, "u 'Cluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEvent(void) {
   /* Event */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootElibdictLN_Event));
   G__memfunc_setup("Event",514,G__rootElibdict_193_0_1, 105, G__get_linked_tagnum(&G__rootElibdictLN_Event), -1, 0, 1, 1, 1, 0, "i - - 0 '0' tdrrawnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__rootElibdict_193_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCluster",1003,G__rootElibdict_193_0_3, 85, G__get_linked_tagnum(&G__rootElibdictLN_Cluster), -1, 0, 2, 1, 1, 0, 
"i - - 0 - lad i - - 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCluster",1026,G__rootElibdict_193_0_4, 85, G__get_linked_tagnum(&G__rootElibdictLN_Cluster), -1, 0, 1, 1, 1, 0, "i - - 0 - ii", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NGoldenClus",1086,G__rootElibdict_193_0_5, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - lad i - - 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__rootElibdict_193_0_6, 85, G__get_linked_tagnum(&G__rootElibdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Event::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__rootElibdict_193_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Event::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__rootElibdict_193_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Event::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__rootElibdict_193_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Event::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__rootElibdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__rootElibdict_193_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__rootElibdict_193_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Event::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__rootElibdict_193_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Event::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__rootElibdict_193_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Event::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__rootElibdict_193_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Event::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Event", 514, G__rootElibdict_193_0_18, (int) ('i'), G__get_linked_tagnum(&G__rootElibdictLN_Event), -1, 0, 1, 1, 1, 0, "u 'Event' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Event", 640, G__rootElibdict_193_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rootElibdict_193_0_20, (int) ('u'), G__get_linked_tagnum(&G__rootElibdictLN_Event), -1, 1, 1, 1, 1, 0, "u 'Event' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRHClass(void) {
   /* RHClass */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootElibdictLN_RHClass));
   G__memfunc_setup("RHClass",656,G__rootElibdict_194_0_1, 105, G__get_linked_tagnum(&G__rootElibdictLN_RHClass), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__rootElibdict_194_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__rootElibdict_194_0_3, 85, G__get_linked_tagnum(&G__rootElibdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&RHClass::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__rootElibdict_194_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RHClass::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__rootElibdict_194_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&RHClass::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__rootElibdict_194_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&RHClass::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__rootElibdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__rootElibdict_194_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__rootElibdict_194_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RHClass::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__rootElibdict_194_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RHClass::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__rootElibdict_194_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RHClass::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__rootElibdict_194_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RHClass::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("RHClass", 656, G__rootElibdict_194_0_15, (int) ('i'), G__get_linked_tagnum(&G__rootElibdictLN_RHClass), -1, 0, 1, 1, 1, 0, "u 'RHClass' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RHClass", 782, G__rootElibdict_194_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rootElibdict_194_0_17, (int) ('u'), G__get_linked_tagnum(&G__rootElibdictLN_RHClass), -1, 1, 1, 1, 1, 0, "u 'RHClass' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncrootElibdict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalrootElibdict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcrootElibdict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__rootElibdictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_Cluster = { "Cluster" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__rootElibdictLN_Event = { "Event" , 99 , -1 };
G__linked_taginfo G__rootElibdictLN_RHClass = { "RHClass" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablerootElibdict() {
  G__rootElibdictLN_TClass.tagnum = -1 ;
  G__rootElibdictLN_TBuffer.tagnum = -1 ;
  G__rootElibdictLN_TMemberInspector.tagnum = -1 ;
  G__rootElibdictLN_TObject.tagnum = -1 ;
  G__rootElibdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__rootElibdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__rootElibdictLN_TClonesArray.tagnum = -1 ;
  G__rootElibdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__rootElibdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__rootElibdictLN_Cluster.tagnum = -1 ;
  G__rootElibdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__rootElibdictLN_Event.tagnum = -1 ;
  G__rootElibdictLN_RHClass.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablerootElibdict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TClass);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TObject);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__rootElibdictLN_Cluster),sizeof(Cluster),-1,292608,(char*)NULL,G__setup_memvarCluster,G__setup_memfuncCluster);
   G__get_linked_tagnum_fwd(&G__rootElibdictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__rootElibdictLN_Event),sizeof(Event),-1,292096,(char*)NULL,G__setup_memvarEvent,G__setup_memfuncEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__rootElibdictLN_RHClass),sizeof(RHClass),-1,292096,(char*)NULL,G__setup_memvarRHClass,G__setup_memfuncRHClass);
}
extern "C" void G__cpp_setuprootElibdict(void) {
  G__check_setup_version(30051515,"G__cpp_setuprootElibdict()");
  G__set_cpp_environmentrootElibdict();
  G__cpp_setup_tagtablerootElibdict();

  G__cpp_setup_inheritancerootElibdict();

  G__cpp_setup_typetablerootElibdict();

  G__cpp_setup_memvarrootElibdict();

  G__cpp_setup_memfuncrootElibdict();
  G__cpp_setup_globalrootElibdict();
  G__cpp_setup_funcrootElibdict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncrootElibdict();
  return;
}
class G__cpp_setup_initrootElibdict {
  public:
    G__cpp_setup_initrootElibdict() { G__add_setup_func("rootElibdict",(G__incsetup)(&G__cpp_setuprootElibdict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initrootElibdict() { G__remove_setup_func("rootElibdict"); }
};
G__cpp_setup_initrootElibdict G__cpp_setup_initializerrootElibdict;

