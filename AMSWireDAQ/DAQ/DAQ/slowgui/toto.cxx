//
// File generated by rootcint at Fri Feb 24 11:11:53 2006.
// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;

#include "toto.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TStreamerInfo.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TCollectionProxy.h"
#include "TIsAProxy.h"
namespace ROOT {
   namespace Shadow {
   } // Of namespace ROOT::Shadow
} // Of namespace ROOT

namespace ROOT {
   void ScopeDis_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void ScopeDis_Dictionary();
   static void delete_ScopeDis(void *p);
   static void deleteArray_ScopeDis(void *p);
   static void destruct_ScopeDis(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::ScopeDis*)
   {
      ::ScopeDis *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ScopeDis),0);
      static ::ROOT::TGenericClassInfo 
         instance("ScopeDis", "slowgui.h", 9,
                  typeid(::ScopeDis), DefineBehavior(ptr, ptr),
                  0, &ScopeDis_Dictionary, isa_proxy, 0,
                  sizeof(::ScopeDis) );
      instance.SetDelete(&delete_ScopeDis);
      instance.SetDeleteArray(&deleteArray_ScopeDis);
      instance.SetDestructor(&destruct_ScopeDis);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::ScopeDis*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ScopeDis_Dictionary() {
      ::ROOT::GenerateInitInstance((const ::ScopeDis*)0x0)->GetClass();
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_ScopeDis(void *p) {
      delete ((::ScopeDis*)p);
   }
   static void deleteArray_ScopeDis(void *p) {
      delete [] ((::ScopeDis*)p);
   }
   static void destruct_ScopeDis(void *p) {
      typedef ::ScopeDis current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ScopeDis

/********************************************************
* toto.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtabletoto();

extern "C" void G__set_cpp_environmenttoto() {
  G__add_macro("G__CINTVERSION=50160002");
  G__add_compiledheader("TROOT.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("slowgui.h");
  G__cpp_reset_tagtabletoto();
}
class G__totodOcxx_tag {};

void* operator new(size_t size,G__totodOcxx_tag* p) {
  if(p && G__PVOID!=G__getgvp()) return((void*)p);
#ifndef G__ROOT
  return(malloc(size));
#else
  return(::operator new(size));
#endif
}

/* dummy, for exception */
#ifdef G__EH_DUMMY_DELETE
void operator delete(void *p,G__totodOcxx_tag* x) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}
#endif

static void G__operator_delete(void *p) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}

void G__DELDMY_totodOcxx() { G__operator_delete(0); }

extern "C" int G__cpp_dllrevtoto() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* ScopeDis */
static int G__toto_251_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   ScopeDis *p=NULL;
      p=::new((G__totodOcxx_tag*)G__getgvp()) ScopeDis(
(const TGWindow*)G__int(libp->para[0]),(UInt_t)G__int(libp->para[1])
,(UInt_t)G__int(libp->para[2]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__totoLN_ScopeDis);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__toto_251_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((ScopeDis*)(G__getstructoffset()))->Exit();
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__toto_251_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   ScopeDis *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new ScopeDis(*(ScopeDis*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__totoLN_ScopeDis);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ScopeDis G__TScopeDis;
static int G__toto_251_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (ScopeDis *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((ScopeDis *)((G__getstructoffset())+sizeof(ScopeDis)*i))->~G__TScopeDis();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((ScopeDis *)(G__getstructoffset()))->~G__TScopeDis();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__toto_251_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   ScopeDis *dest = (ScopeDis*)(G__getstructoffset());
   *dest = (*(ScopeDis*)libp->para[0].ref);
   const ScopeDis& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* ScopeDis */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunctoto {
 public:
  G__Sizep2memfunctoto() {p=&G__Sizep2memfunctoto::sizep2memfunc;}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunctoto::*p)();
};

size_t G__get_sizep2memfunctoto()
{
  G__Sizep2memfunctoto a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancetoto() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetabletoto() {

   /* Setting up typedef entry */
   G__search_typename2("UInt_t",104,-1,0,
-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("vector<TStreamerInfo*>",117,G__get_linked_tagnum(&G__totoLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.50 2005/09/16 08:48:39 rdm Exp $",0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__totoLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__totoLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.50 2005/09/16 08:48:39 rdm Exp $",0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__totoLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__totoLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.50 2005/09/16 08:48:39 rdm Exp $",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* ScopeDis */
static void G__setup_memvarScopeDis(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__totoLN_ScopeDis));
   { ScopeDis *p; p=(ScopeDis*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__totoLN_TGMainFrame),-1,-1,4,"fMain=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvartoto() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncScopeDis(void) {
   /* ScopeDis */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__totoLN_ScopeDis));
   G__memfunc_setup("ScopeDis",794,G__toto_251_1_0,105,G__get_linked_tagnum(&G__totoLN_ScopeDis),-1,0,3,1,1,0,
"U 'TGWindow' - 10 - p h - 'UInt_t' 0 - w "
"h - 'UInt_t' 0 - h",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Exit",410,G__toto_251_2_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("ScopeDis",794,G__toto_251_3_0,(int)('i'),G__get_linked_tagnum(&G__totoLN_ScopeDis),-1,0,1,1,1,0,"u 'ScopeDis' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~ScopeDis",920,G__toto_251_4_0,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__toto_251_5_0,(int)('u'),G__get_linked_tagnum(&G__totoLN_ScopeDis),-1,1,1,1,1,0,"u 'ScopeDis' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunctoto() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globaltoto() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_functoto() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__totoLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR = { "vector<TStreamerInfo*,allocator<TStreamerInfo*> >" , 99 , -1 };
G__linked_taginfo G__totoLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TStreamerInfo*,allocator<TStreamerInfo*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__totoLN_TGWindow = { "TGWindow" , 99 , -1 };
G__linked_taginfo G__totoLN_TGMainFrame = { "TGMainFrame" , 99 , -1 };
G__linked_taginfo G__totoLN_ScopeDis = { "ScopeDis" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtabletoto() {
  G__totoLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR.tagnum = -1 ;
  G__totoLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__totoLN_TGWindow.tagnum = -1 ;
  G__totoLN_TGMainFrame.tagnum = -1 ;
  G__totoLN_ScopeDis.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtabletoto() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum(&G__totoLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR);
   G__get_linked_tagnum(&G__totoLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__totoLN_TGWindow);
   G__get_linked_tagnum(&G__totoLN_TGMainFrame);
   G__tagtable_setup(G__get_linked_tagnum(&G__totoLN_ScopeDis),sizeof(ScopeDis),-1,33792,(char*)NULL,G__setup_memvarScopeDis,G__setup_memfuncScopeDis);
}
extern "C" void G__cpp_setuptoto(void) {
  G__check_setup_version(30051515,"G__cpp_setuptoto()");
  G__set_cpp_environmenttoto();
  G__cpp_setup_tagtabletoto();

  G__cpp_setup_inheritancetoto();

  G__cpp_setup_typetabletoto();

  G__cpp_setup_memvartoto();

  G__cpp_setup_memfunctoto();
  G__cpp_setup_globaltoto();
  G__cpp_setup_functoto();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunctoto();
  return;
}
class G__cpp_setup_inittoto {
  public:
    G__cpp_setup_inittoto() { G__add_setup_func("toto",(G__incsetup)(&G__cpp_setuptoto)); G__call_setup_funcs(); }
   ~G__cpp_setup_inittoto() { G__remove_setup_func("toto"); }
};
G__cpp_setup_inittoto G__cpp_setup_initializertoto;

