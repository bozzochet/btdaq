#  $Id: trid.doc,v 1.1.1.1 2007/11/13 09:56:11 zuccon Exp $
class AMSTrIdGeom{   //  Tracker Geometrical ID
protected:
integer _layer;    // layer   from 1 to 6
integer _ladder;   // ladder  from 1 to AMSDBc::nlad(_layer)
integer _sensor;   // sensor  from 1 to AMSDBc::nsen(_layer,_ladder)
integer _stripx;   // strip_x from 0 to AMSDBc::NStripsSen(_layer,0)-1
integer _stripy;   // strip_y from 0 to AMSDBc::NStripsSen(_layer,1)-1
public:
AMSTrIdGeom(){};                     //default ctor

~AMSTrIdGeom(){};                    //default ctor

AMSTrIdGeom( const AMSTrIdGeom& o);  //copy ctor

AMSTrIdGeom(integer layer,integer ladder,integer sensor, integer stripx,
integer stripy);                    // init ctor

AMSTrIdGeom(integer idsoft, 
integer stripx=0, integer stripy=0);  // decoding ctor

number  getsize(integer side)const;  // get size of the strip in cm

inline void upd(integer side,integer strip); // updates corr strip no

inline integer getlayer() const {return _layer;}

inline integer getladder()const {return _ladder;}

inline integer getsensor()const {return _sensor;}        

inline integer cmpt()const 
  {return _layer+10*_ladder+1000*_sensor;}  // coded ID in one word  
                                                     
inline integer getstrip (integer iside);   // returns corr strip no

inline number getmaxsize(integer side);   // returns corr size of sensor in cm

inline integer getmaxstrips(integer i) const; // returns max stip number

integer size2strip(integer side, number size); // converts coord->stripNo

inline number strip2size(integer side); // converts stripNo->coord

};



////////////////


class AMSTrIdSoft{  // Tracker SoftWare (==ReadOut) Id.
private:
integer _layer;   // layer from 1 to 6
integer _drp;     // ladder from 1 to AMSDBc::nlad(_layer)
integer _side;    // side 0=x 1=y
integer _half;    // 0/1 halfladder from 0 to 1
integer _strip;   // strip from 0 to getmaxstrips()-1
integer _addr;    // compact address Calculated from the above
AMSTrIdGeom * _pid; // pointer to corr Geom ID(s).
static integer idsoft2linear[ms]; // aux array 
static integer *status;           //  status of readout channels
static geant *peds;               // pedestals
static geant *gains;              // gains
static geant *sigmas;             // sigmas
static geant *cmnnoise;           // common noise
static number *indnoise;          // individual noise
static integer _numel;            // Total number of readout channels
public:

public:
static void init();  // Initialization 

integer operator < (const AMSTrIdSoft & o)const; // operator <

inline integer getaddr() const {return _addr;}

inline integer getstatus(integer checker) const; // returns status & checker

inline geant getped() const //  returns pedestal value

inline geant getsig() const // return sigma value

inline geant getgain() const  // returns gain value

inline number getindnoise() const // returns ind noise value

integer getprob(number r);    // aux for tracker noise calcul

inline geant getcmnnoise() const // returns common noise

// sets 

geant & setped()  

geant & setsig()  

geant & setgain() 

number & setindnoise()

geant & setcmnnoise() 

void  setstatus(integer changer) // set status

AMSTrIdSoft(const AMSTrIdGeom &,integer side);  // ctor from GeomId

AMSTrIdSoft( const AMSTrIdSoft& o)   // copy ctor

inline integer cmpt() const    // code id into one word

inline integer getmaxstrips()  // returns max no of readout chan in one ladder


inline integer getlayer() const {return _layer;}

inline integer getdrp() const {return _drp;}

inline integer getside()const {return _side;}

inline integer gethalf()const {return _half;}

inline integer getstrip()const {return _strip;}

AMSTrIdGeom * ambig
(const AMSTrIdSoft &, integer & nambig) ; // make GeomID(S) from two SoftId




};
