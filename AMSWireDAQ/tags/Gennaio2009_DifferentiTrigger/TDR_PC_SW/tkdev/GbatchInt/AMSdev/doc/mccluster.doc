#  $Id: mccluster.doc,v 1.1.1.1 2007/11/13 09:56:11 zuccon Exp $
// TOF simulation   // temporary 

class AMSTOFMCCluster: public AMSlink{  // TOF simulation class
public:
 integer idsoft;                        // softid
 AMSPoint xcoo;                         // 3dim coordinates of hit
 number tof;                            // time of flight
 number edep;                           // energy deposition
 
 AMSTOFMCCluster(integer _idsoft,AMSPoint _xcoo,number _edep, number _tof)
  
 integer operator < (AMSlink & o)  //operator < for sorted container

 static void sitofhits
 (integer idsoft , geant vect[],geant edep, geant tofg);  // makes hits


// Tracker Simulation

                 

const integer _nel=5;

class AMSTrMCCluster: public AMSlink{    // Tracker MC classs
protected:
 integer _idsoft;                   // Geant sensor id == AMSTrIdGeom.cmpt();
 integer _itra;                     // Geant track number
 integer _left[2];                  // min strips number
 integer _center[2];                // center strips number
 integer _right[2];                 // max strips number
 geant _ss[2][5];                   // strip responses
 AMSPoint _xca;                     // local coord track enter
 AMSPoint _xcb;                     // local coord track exit
 AMSPoint _xgl;                     // average global coord
 number _sum;                       // energy deposition
 void _shower();                    // digitization routine  
public:
 // Constructor for noise &crosstalk
 AMSTrMCCluster(const AMSTrIdGeom & id,integer side,integer nel, number ss[],
 integer itra);

 // Constructor for geant track
 AMSTrMCCluster(integer idsoft, AMSPoint xca, 
 AMSPoint xcb, AMSPoint xgl, geant sum,integer itra);

 AMSTrIdGeom getid(); // makes AMSTrIdGeom

  void addcontent(char xy, geant ** p)    // interface with AMSTrRawCluster

 static void sitkhits(integer idsoft , geant vect[],geant edep, 
 geant step, integer itra );  // makes hits

 static void sitkcrosstalk(); // generates crosstalk

 static void sitknoise();     // generate noise

 static number sitknoiseprob
 (const AMSTrIdSoft & id, number threshold);  // returns noise prob> threshold

 static void sitknoisespectrum(const AMSTrIdSoft & id,integer nch,
 number ss[]);             // returns noise spectrum 
